{"version":3,"sources":["../static/js/62.eb9a2da7.chunk.js","../node_modules/monaco-editor/esm/vs/basic-languages/apex/apex.js"],"names":["webpackJsonp","1316","module","__webpack_exports__","__webpack_require__","conf","wordPattern","comments","lineComment","blockComment","brackets","autoClosingPairs","open","close","surroundingPairs","folding","markers","start","RegExp","end","keywords","uppercaseFirstLetter","lowercase","charAt","toUpperCase","substr","keywordsWithCaseVariations","forEach","push","language","defaultToken","tokenPostfix","operators","symbols","escapes","digits","octaldigits","binarydigits","hexdigits","tokenizer","root","cases","token","include","whitespace","comment","apexdoc","string","next"],"mappings":"AAAAA,cAAc,KAERC,KACA,SAAUC,EAAQC,EAAqBC,GAE7C,YCLA,2HAKO,IAAIC,IAEPC,YAAa,qFACbC,UACIC,YAAa,KACbC,cAAe,KAAM,OAEzBC,WACK,IAAK,MACL,IAAK,MACL,IAAK,MAEVC,mBACMC,KAAM,IAAKC,MAAO,MAClBD,KAAM,IAAKC,MAAO,MAClBD,KAAM,IAAKC,MAAO,MAClBD,KAAM,IAAKC,MAAO,MAClBD,KAAM,IAAMC,MAAO,MAEzBC,mBACMF,KAAM,IAAKC,MAAO,MAClBD,KAAM,IAAKC,MAAO,MAClBD,KAAM,IAAKC,MAAO,MAClBD,KAAM,IAAKC,MAAO,MAClBD,KAAM,IAAMC,MAAO,MACnBD,KAAM,IAAKC,MAAO,MAExBE,SACIC,SACIC,MAAO,GAAIC,QAAO,sDAClBC,IAAK,GAAID,QAAO,2DAIxBE,GACA,WACA,WACA,MACA,MACA,QACA,KACA,MACA,SACA,aACA,QACA,aACA,OACA,UACA,QACA,OACA,KACA,OACA,OACA,QACA,OACA,QACA,UACA,SACA,QACA,WACA,kBACA,UACA,UACA,SACA,OACA,KACA,SACA,OACA,MACA,OACA,YACA,OACA,SACA,UACA,QACA,QACA,UACA,QACA,MACA,OACA,SACA,MACA,SACA,OACA,QACA,SACA,OACA,KACA,aACA,SACA,KACA,QACA,SACA,aACA,MACA,YACA,OACA,OACA,eACA,aACA,cACA,YACA,OACA,QACA,OACA,OACA,OACA,MACA,QACA,SACA,MACA,eACA,aACA,cACA,YACA,MACA,OACA,QACA,SACA,SACA,KACA,KACA,KACA,QACA,WACA,UACA,WACA,SACA,UACA,YACA,SACA,WACA,SACA,YACA,WACA,YACA,SACA,SACA,MACA,QACA,OACA,OACA,SACA,WACA,QACA,SACA,eACA,SACA,aACA,OACA,OACA,aACA,YACA,QACA,SACA,QACA,UACA,WACA,cACA,YACA,UACA,OACA,MACA,OACA,WACA,SACA,SACA,QACA,UACA,OACA,WACA,aACA,OACA,QACA,QACA,aAIAC,EAAuB,SAAUC,GAAa,MAAOA,GAAUC,OAAO,GAAGC,cAAgBF,EAAUG,OAAO,IAC1GC,IACJN,GAASO,QAAQ,SAAUL,GACvBI,EAA2BE,KAAKN,GAChCI,EAA2BE,KAAKN,EAAUE,eAC1CE,EAA2BE,KAAKP,EAAqBC,KAElD,IAAIO,IACPC,aAAc,GACdC,aAAc,QACdX,SAAUM,EACVM,WACI,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAC9B,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAC1C,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,KACxC,KAAM,MAAO,KAAM,KAAM,KAAM,KAAM,KAAM,KAC3C,KAAM,KAAM,MAAO,MAAO,QAG9BC,QAAS,wBACTC,QAAS,wEACTC,OAAQ,cACRC,YAAa,oBACbC,aAAc,oBACdC,UAAW,iCAEXC,WACIC,OAEK,iBACOC,OACI,aAAeC,MAAO,cACtB,WAAY,iBAIvB,gBACOD,OACI,aAAeC,MAAO,cACtB,WAAY,sBAItBC,QAAS,gBAEV,aAAc,cACd,mBAAoB,cACpB,YACOF,OACI,aAAc,YACd,WAAY,OAIvB,yBAA0B,eAE1B,yCAA0C,iBAC1C,oDAAqD,iBACrD,kBAAmB,iBACnB,iBAAkB,WAElB,QAAS,cAET,kBAAmB,mBACnB,kBAAmB,mBACnB,IAAK,SAAU,cACf,IAAK,SAAU,cAEf,WAAY,WACZ,oBAAqB,SAAU,gBAAiB,YAChD,IAAK,mBAEVG,aACK,aAAc,KACd,eAAgB,cAAe,aAC/B,OAAQ,UAAW,aACnB,UAAW,YAEhBC,UACK,UAAW,YAGX,OAAQ,UAAW,SACnB,QAAS,YAGdC,UACK,UAAW,gBACX,OAAQ,cAAe,SACvB,QAAS,gBAEdC,SACK,WAAY,WACZ,WAAY,kBACZ,MAAO,0BACP,QAAUN,OAAS,WAAaC,MAAO,SAAUM,KAAM,QAC5C,WAAY","file":"static/js/62.eb9a2da7.chunk.js","sourcesContent":["webpackJsonp([62],{\n\n/***/ 1316:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\nObject.defineProperty(__webpack_exports__, \"__esModule\", { value: true });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"conf\", function() { return conf; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"language\", function() { return language; });\n/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/var conf={// the default separators except `@$`\nwordPattern:/(-?\\d*\\.\\d\\w*)|([^\\`\\~\\!\\#\\%\\^\\&\\*\\(\\)\\-\\=\\+\\[\\{\\]\\}\\\\\\|\\;\\:\\'\\\"\\,\\.\\<\\>\\/\\?\\s]+)/g,comments:{lineComment:'//',blockComment:['/*','*/']},brackets:[['{','}'],['[',']'],['(',')']],autoClosingPairs:[{open:'{',close:'}'},{open:'[',close:']'},{open:'(',close:')'},{open:'\"',close:'\"'},{open:'\\'',close:'\\''}],surroundingPairs:[{open:'{',close:'}'},{open:'[',close:']'},{open:'(',close:')'},{open:'\"',close:'\"'},{open:'\\'',close:'\\''},{open:'<',close:'>'}],folding:{markers:{start:new RegExp(\"^\\\\s*//\\\\s*(?:(?:#?region\\\\b)|(?:<editor-fold\\\\b))\"),end:new RegExp(\"^\\\\s*//\\\\s*(?:(?:#?endregion\\\\b)|(?:</editor-fold>))\")}}};var keywords=['abstract','activate','and','any','array','as','asc','assert','autonomous','begin','bigdecimal','blob','boolean','break','bulk','by','case','cast','catch','char','class','collect','commit','const','continue','convertcurrency','decimal','default','delete','desc','do','double','else','end','enum','exception','exit','export','extends','false','final','finally','float','for','from','future','get','global','goto','group','having','hint','if','implements','import','in','inner','insert','instanceof','int','interface','into','join','last_90_days','last_month','last_n_days','last_week','like','limit','list','long','loop','map','merge','native','new','next_90_days','next_month','next_n_days','next_week','not','null','nulls','number','object','of','on','or','outer','override','package','parallel','pragma','private','protected','public','retrieve','return','returning','rollback','savepoint','search','select','set','short','sort','stat','static','strictfp','super','switch','synchronized','system','testmethod','then','this','this_month','this_week','throw','throws','today','tolabel','tomorrow','transaction','transient','trigger','true','try','type','undelete','update','upsert','using','virtual','void','volatile','webservice','when','where','while','yesterday'];// create case variations of the keywords - apex is case insensitive, but we can't make the highlighter case insensitive\n// because we use a heuristic to assume that identifiers starting with an upper case letter are types.\nvar uppercaseFirstLetter=function uppercaseFirstLetter(lowercase){return lowercase.charAt(0).toUpperCase()+lowercase.substr(1);};var keywordsWithCaseVariations=[];keywords.forEach(function(lowercase){keywordsWithCaseVariations.push(lowercase);keywordsWithCaseVariations.push(lowercase.toUpperCase());keywordsWithCaseVariations.push(uppercaseFirstLetter(lowercase));});var language={defaultToken:'',tokenPostfix:'.apex',keywords:keywordsWithCaseVariations,operators:['=','>','<','!','~','?',':','==','<=','>=','!=','&&','||','++','--','+','-','*','/','&','|','^','%','<<','>>','>>>','+=','-=','*=','/=','&=','|=','^=','%=','<<=','>>=','>>>='],// we include these common regular expressions\nsymbols:/[=><!~?:&|+\\-*\\/\\^%]+/,escapes:/\\\\(?:[abfnrtv\\\\\"']|x[0-9A-Fa-f]{1,4}|u[0-9A-Fa-f]{4}|U[0-9A-Fa-f]{8})/,digits:/\\d+(_+\\d+)*/,octaldigits:/[0-7]+(_+[0-7]+)*/,binarydigits:/[0-1]+(_+[0-1]+)*/,hexdigits:/[[0-9a-fA-F]+(_+[0-9a-fA-F]+)*/,// The main tokenizer for our languages\ntokenizer:{root:[// identifiers and keywords\n[/[a-z_$][\\w$]*/,{cases:{'@keywords':{token:'keyword.$0'},'@default':'identifier'}}],// assume that identifiers starting with an uppercase letter are types\n[/[A-Z][\\w\\$]*/,{cases:{'@keywords':{token:'keyword.$0'},'@default':'type.identifier'}}],// whitespace\n{include:'@whitespace'},// delimiters and operators\n[/[{}()\\[\\]]/,'@brackets'],[/[<>](?!@symbols)/,'@brackets'],[/@symbols/,{cases:{'@operators':'delimiter','@default':''}}],// @ annotations.\n[/@\\s*[a-zA-Z_\\$][\\w\\$]*/,'annotation'],// numbers\n[/(@digits)[eE]([\\-+]?(@digits))?[fFdD]?/,'number.float'],[/(@digits)\\.(@digits)([eE][\\-+]?(@digits))?[fFdD]?/,'number.float'],[/(@digits)[fFdD]/,'number.float'],[/(@digits)[lL]?/,'number'],// delimiter: after number because of .\\d floats\n[/[;,.]/,'delimiter'],// strings\n[/\"([^\"\\\\]|\\\\.)*$/,'string.invalid'],[/'([^'\\\\]|\\\\.)*$/,'string.invalid'],[/\"/,'string','@string.\"'],[/'/,'string','@string.\\''],// characters\n[/'[^\\\\']'/,'string'],[/(')(@escapes)(')/,['string','string.escape','string']],[/'/,'string.invalid']],whitespace:[[/[ \\t\\r\\n]+/,''],[/\\/\\*\\*(?!\\/)/,'comment.doc','@apexdoc'],[/\\/\\*/,'comment','@comment'],[/\\/\\/.*$/,'comment']],comment:[[/[^\\/*]+/,'comment'],// [/\\/\\*/, 'comment', '@push' ],    // nested comment not allowed :-(\n// [/\\/\\*/,    'comment.invalid' ],    // this breaks block comments in the shape of /* //*/\n[/\\*\\//,'comment','@pop'],[/[\\/*]/,'comment']],//Identical copy of comment above, except for the addition of .doc\napexdoc:[[/[^\\/*]+/,'comment.doc'],[/\\*\\//,'comment.doc','@pop'],[/[\\/*]/,'comment.doc']],string:[[/[^\\\\\"']+/,'string'],[/@escapes/,'string.escape'],[/\\\\./,'string.escape.invalid'],[/[\"']/,{cases:{'$#==$S2':{token:'string',next:'@pop'},'@default':'string'}}]]}};\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// static/js/62.eb9a2da7.chunk.js","/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\n'use strict';\r\nexport var conf = {\r\n    // the default separators except `@$`\r\n    wordPattern: /(-?\\d*\\.\\d\\w*)|([^\\`\\~\\!\\#\\%\\^\\&\\*\\(\\)\\-\\=\\+\\[\\{\\]\\}\\\\\\|\\;\\:\\'\\\"\\,\\.\\<\\>\\/\\?\\s]+)/g,\r\n    comments: {\r\n        lineComment: '//',\r\n        blockComment: ['/*', '*/'],\r\n    },\r\n    brackets: [\r\n        ['{', '}'],\r\n        ['[', ']'],\r\n        ['(', ')'],\r\n    ],\r\n    autoClosingPairs: [\r\n        { open: '{', close: '}' },\r\n        { open: '[', close: ']' },\r\n        { open: '(', close: ')' },\r\n        { open: '\"', close: '\"' },\r\n        { open: '\\'', close: '\\'' },\r\n    ],\r\n    surroundingPairs: [\r\n        { open: '{', close: '}' },\r\n        { open: '[', close: ']' },\r\n        { open: '(', close: ')' },\r\n        { open: '\"', close: '\"' },\r\n        { open: '\\'', close: '\\'' },\r\n        { open: '<', close: '>' },\r\n    ],\r\n    folding: {\r\n        markers: {\r\n            start: new RegExp(\"^\\\\s*//\\\\s*(?:(?:#?region\\\\b)|(?:<editor-fold\\\\b))\"),\r\n            end: new RegExp(\"^\\\\s*//\\\\s*(?:(?:#?endregion\\\\b)|(?:</editor-fold>))\")\r\n        }\r\n    }\r\n};\r\nvar keywords = [\r\n    'abstract',\r\n    'activate',\r\n    'and',\r\n    'any',\r\n    'array',\r\n    'as',\r\n    'asc',\r\n    'assert',\r\n    'autonomous',\r\n    'begin',\r\n    'bigdecimal',\r\n    'blob',\r\n    'boolean',\r\n    'break',\r\n    'bulk',\r\n    'by',\r\n    'case',\r\n    'cast',\r\n    'catch',\r\n    'char',\r\n    'class',\r\n    'collect',\r\n    'commit',\r\n    'const',\r\n    'continue',\r\n    'convertcurrency',\r\n    'decimal',\r\n    'default',\r\n    'delete',\r\n    'desc',\r\n    'do',\r\n    'double',\r\n    'else',\r\n    'end',\r\n    'enum',\r\n    'exception',\r\n    'exit',\r\n    'export',\r\n    'extends',\r\n    'false',\r\n    'final',\r\n    'finally',\r\n    'float',\r\n    'for',\r\n    'from',\r\n    'future',\r\n    'get',\r\n    'global',\r\n    'goto',\r\n    'group',\r\n    'having',\r\n    'hint',\r\n    'if',\r\n    'implements',\r\n    'import',\r\n    'in',\r\n    'inner',\r\n    'insert',\r\n    'instanceof',\r\n    'int',\r\n    'interface',\r\n    'into',\r\n    'join',\r\n    'last_90_days',\r\n    'last_month',\r\n    'last_n_days',\r\n    'last_week',\r\n    'like',\r\n    'limit',\r\n    'list',\r\n    'long',\r\n    'loop',\r\n    'map',\r\n    'merge',\r\n    'native',\r\n    'new',\r\n    'next_90_days',\r\n    'next_month',\r\n    'next_n_days',\r\n    'next_week',\r\n    'not',\r\n    'null',\r\n    'nulls',\r\n    'number',\r\n    'object',\r\n    'of',\r\n    'on',\r\n    'or',\r\n    'outer',\r\n    'override',\r\n    'package',\r\n    'parallel',\r\n    'pragma',\r\n    'private',\r\n    'protected',\r\n    'public',\r\n    'retrieve',\r\n    'return',\r\n    'returning',\r\n    'rollback',\r\n    'savepoint',\r\n    'search',\r\n    'select',\r\n    'set',\r\n    'short',\r\n    'sort',\r\n    'stat',\r\n    'static',\r\n    'strictfp',\r\n    'super',\r\n    'switch',\r\n    'synchronized',\r\n    'system',\r\n    'testmethod',\r\n    'then',\r\n    'this',\r\n    'this_month',\r\n    'this_week',\r\n    'throw',\r\n    'throws',\r\n    'today',\r\n    'tolabel',\r\n    'tomorrow',\r\n    'transaction',\r\n    'transient',\r\n    'trigger',\r\n    'true',\r\n    'try',\r\n    'type',\r\n    'undelete',\r\n    'update',\r\n    'upsert',\r\n    'using',\r\n    'virtual',\r\n    'void',\r\n    'volatile',\r\n    'webservice',\r\n    'when',\r\n    'where',\r\n    'while',\r\n    'yesterday'\r\n];\r\n// create case variations of the keywords - apex is case insensitive, but we can't make the highlighter case insensitive\r\n// because we use a heuristic to assume that identifiers starting with an upper case letter are types.\r\nvar uppercaseFirstLetter = function (lowercase) { return lowercase.charAt(0).toUpperCase() + lowercase.substr(1); };\r\nvar keywordsWithCaseVariations = [];\r\nkeywords.forEach(function (lowercase) {\r\n    keywordsWithCaseVariations.push(lowercase);\r\n    keywordsWithCaseVariations.push(lowercase.toUpperCase());\r\n    keywordsWithCaseVariations.push(uppercaseFirstLetter(lowercase));\r\n});\r\nexport var language = {\r\n    defaultToken: '',\r\n    tokenPostfix: '.apex',\r\n    keywords: keywordsWithCaseVariations,\r\n    operators: [\r\n        '=', '>', '<', '!', '~', '?', ':',\r\n        '==', '<=', '>=', '!=', '&&', '||', '++', '--',\r\n        '+', '-', '*', '/', '&', '|', '^', '%', '<<',\r\n        '>>', '>>>', '+=', '-=', '*=', '/=', '&=', '|=',\r\n        '^=', '%=', '<<=', '>>=', '>>>='\r\n    ],\r\n    // we include these common regular expressions\r\n    symbols: /[=><!~?:&|+\\-*\\/\\^%]+/,\r\n    escapes: /\\\\(?:[abfnrtv\\\\\"']|x[0-9A-Fa-f]{1,4}|u[0-9A-Fa-f]{4}|U[0-9A-Fa-f]{8})/,\r\n    digits: /\\d+(_+\\d+)*/,\r\n    octaldigits: /[0-7]+(_+[0-7]+)*/,\r\n    binarydigits: /[0-1]+(_+[0-1]+)*/,\r\n    hexdigits: /[[0-9a-fA-F]+(_+[0-9a-fA-F]+)*/,\r\n    // The main tokenizer for our languages\r\n    tokenizer: {\r\n        root: [\r\n            // identifiers and keywords\r\n            [/[a-z_$][\\w$]*/, {\r\n                    cases: {\r\n                        '@keywords': { token: 'keyword.$0' },\r\n                        '@default': 'identifier'\r\n                    }\r\n                }],\r\n            // assume that identifiers starting with an uppercase letter are types\r\n            [/[A-Z][\\w\\$]*/, {\r\n                    cases: {\r\n                        '@keywords': { token: 'keyword.$0' },\r\n                        '@default': 'type.identifier'\r\n                    }\r\n                }],\r\n            // whitespace\r\n            { include: '@whitespace' },\r\n            // delimiters and operators\r\n            [/[{}()\\[\\]]/, '@brackets'],\r\n            [/[<>](?!@symbols)/, '@brackets'],\r\n            [/@symbols/, {\r\n                    cases: {\r\n                        '@operators': 'delimiter',\r\n                        '@default': ''\r\n                    }\r\n                }],\r\n            // @ annotations.\r\n            [/@\\s*[a-zA-Z_\\$][\\w\\$]*/, 'annotation'],\r\n            // numbers\r\n            [/(@digits)[eE]([\\-+]?(@digits))?[fFdD]?/, 'number.float'],\r\n            [/(@digits)\\.(@digits)([eE][\\-+]?(@digits))?[fFdD]?/, 'number.float'],\r\n            [/(@digits)[fFdD]/, 'number.float'],\r\n            [/(@digits)[lL]?/, 'number'],\r\n            // delimiter: after number because of .\\d floats\r\n            [/[;,.]/, 'delimiter'],\r\n            // strings\r\n            [/\"([^\"\\\\]|\\\\.)*$/, 'string.invalid'],\r\n            [/'([^'\\\\]|\\\\.)*$/, 'string.invalid'],\r\n            [/\"/, 'string', '@string.\"'],\r\n            [/'/, 'string', '@string.\\''],\r\n            // characters\r\n            [/'[^\\\\']'/, 'string'],\r\n            [/(')(@escapes)(')/, ['string', 'string.escape', 'string']],\r\n            [/'/, 'string.invalid']\r\n        ],\r\n        whitespace: [\r\n            [/[ \\t\\r\\n]+/, ''],\r\n            [/\\/\\*\\*(?!\\/)/, 'comment.doc', '@apexdoc'],\r\n            [/\\/\\*/, 'comment', '@comment'],\r\n            [/\\/\\/.*$/, 'comment'],\r\n        ],\r\n        comment: [\r\n            [/[^\\/*]+/, 'comment'],\r\n            // [/\\/\\*/, 'comment', '@push' ],    // nested comment not allowed :-(\r\n            // [/\\/\\*/,    'comment.invalid' ],    // this breaks block comments in the shape of /* //*/\r\n            [/\\*\\//, 'comment', '@pop'],\r\n            [/[\\/*]/, 'comment']\r\n        ],\r\n        //Identical copy of comment above, except for the addition of .doc\r\n        apexdoc: [\r\n            [/[^\\/*]+/, 'comment.doc'],\r\n            [/\\*\\//, 'comment.doc', '@pop'],\r\n            [/[\\/*]/, 'comment.doc']\r\n        ],\r\n        string: [\r\n            [/[^\\\\\"']+/, 'string'],\r\n            [/@escapes/, 'string.escape'],\r\n            [/\\\\./, 'string.escape.invalid'],\r\n            [/[\"']/, { cases: { '$#==$S2': { token: 'string', next: '@pop' },\r\n                        '@default': 'string' } }]\r\n        ],\r\n    },\r\n};\r\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/monaco-editor/esm/vs/basic-languages/apex/apex.js"],"sourceRoot":""}