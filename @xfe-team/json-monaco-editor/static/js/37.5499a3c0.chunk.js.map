{"version":3,"sources":["../static/js/37.5499a3c0.chunk.js","../node_modules/monaco-editor/esm/vs/basic-languages/pascal/pascal.js"],"names":["webpackJsonp","1344","module","__webpack_exports__","__webpack_require__","conf","wordPattern","comments","lineComment","blockComment","brackets","autoClosingPairs","open","close","surroundingPairs","folding","markers","start","RegExp","end","language","defaultToken","tokenPostfix","ignoreCase","token","keywords","typeKeywords","operators","symbols","tokenizer","root","cases","include","comment","string","bracket","next","whitespace"],"mappings":"AAAAA,cAAc,KAERC,KACA,SAAUC,EAAQC,EAAqBC,GAE7C,YCLA,2HAKO,IAAIC,IAEPC,YAAa,qFACbC,UACIC,YAAa,KACbC,cAAe,IAAK,MAExBC,WACK,IAAK,MACL,IAAK,MACL,IAAK,MACL,IAAK,MAEVC,mBACMC,KAAM,IAAKC,MAAO,MAClBD,KAAM,IAAKC,MAAO,MAClBD,KAAM,IAAKC,MAAO,MAClBD,KAAM,IAAKC,MAAO,MAClBD,KAAM,IAAMC,MAAO,MAEzBC,mBACMF,KAAM,IAAKC,MAAO,MAClBD,KAAM,IAAKC,MAAO,MAClBD,KAAM,IAAKC,MAAO,MAClBD,KAAM,IAAKC,MAAO,MAClBD,KAAM,IAAMC,MAAO,MAEzBE,SACIC,SACIC,MAAO,GAAIC,QAAO,sCAClBC,IAAK,GAAID,QAAO,8BAIjBE,GACPC,aAAc,GACdC,aAAc,UACdC,YAAY,EACZb,WACME,KAAM,IAAKC,MAAO,IAAKW,MAAO,oBAC9BZ,KAAM,IAAKC,MAAO,IAAKW,MAAO,qBAC9BZ,KAAM,IAAKC,MAAO,IAAKW,MAAO,0BAC9BZ,KAAM,IAAKC,MAAO,IAAKW,MAAO,oBAEpCC,UACI,WAAY,WAAY,MAAO,WAAY,QAAS,KAAM,MAC1D,YAAa,QAAS,WAAY,OAAQ,QAAS,QACnD,WAAY,UAAW,MAAO,OAAQ,MAAO,SAC7C,UAAW,WAAY,MAAO,OAAQ,eAAgB,UACtD,UAAW,UAAW,OAAQ,KAAM,aAAc,SAAU,KAC5D,QAAS,YAAa,iBAAkB,YAAa,KAAM,QAC3D,UAAW,MAAO,SAAU,OAAQ,OAAQ,MAAO,SAAU,KAC7D,KAAM,OAAQ,WAAY,UAAW,YAAa,WAClD,UAAW,SAAU,MAAO,UAAW,UAAW,YAClD,SAAU,YAAa,YAAa,iBAAkB,YACtD,OAAQ,SAAU,WAAY,WAAY,iBAC1C,aAAc,UAAW,MAAO,MAAO,MAAO,aAAc,SAC5D,OAAQ,YAAa,KAAM,MAAO,OAAQ,OAAQ,OAAQ,MAC1D,OAAQ,UAAW,UAAW,WAAY,cAAe,OACzD,QAAS,MAAO,OAAQ,QAAS,YAAa,WAC9C,cAAe,aAAc,WAAY,QAAS,WAAY,OAC9D,QAAS,QAAS,KAAM,MAAO,QAAS,SAAU,SAEtDC,cACI,UAAW,SAAU,OAAQ,UAAW,WAAY,OACpD,UAAW,QAAS,UAExBC,WACI,IAAK,IAAK,IAAK,KAAM,KAAM,KAAM,IAAK,KAAM,MAAO,KACnD,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,KAGvCC,QAAS,wBAETC,WACIC,OAEK,kBACOC,OACI,aAAeP,MAAO,cACtB,WAAY,iBAItBQ,QAAS,gBAEV,aAAc,cACd,mBAAoB,cACpB,YACOD,OACI,aAAc,YACd,WAAY,OAIvB,2BAA4B,iBAC5B,sBAAuB,eACvB,MAAO,WAEP,QAAS,cAET,kBAAmB,mBACnB,IAAK,SAAU,YAEf,WAAY,WACZ,IAAK,mBACL,QAAS,WAEdE,UACK,WAAY,YAEZ,KAAM,UAAW,SACjB,OAAQ,YAEbC,SACK,UAAW,WACX,MAAO,0BACP,KAAOV,MAAO,eAAgBW,QAAS,SAAUC,KAAM,UAE5DC,aACK,aAAc,UACd,KAAM,UAAW,aACjB,UAAW","file":"static/js/37.5499a3c0.chunk.js","sourcesContent":["webpackJsonp([37],{\n\n/***/ 1344:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\nObject.defineProperty(__webpack_exports__, \"__esModule\", { value: true });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"conf\", function() { return conf; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"language\", function() { return language; });\n/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/var conf={// the default separators except `@$`\nwordPattern:/(-?\\d*\\.\\d\\w*)|([^\\`\\~\\!\\#\\%\\^\\&\\*\\(\\)\\-\\=\\+\\[\\{\\]\\}\\\\\\|\\;\\:\\'\\\"\\,\\.\\<\\>\\/\\?\\s]+)/g,comments:{lineComment:'//',blockComment:['{','}']},brackets:[['{','}'],['[',']'],['(',')'],['<','>']],autoClosingPairs:[{open:'{',close:'}'},{open:'[',close:']'},{open:'(',close:')'},{open:'<',close:'>'},{open:'\\'',close:'\\''}],surroundingPairs:[{open:'{',close:'}'},{open:'[',close:']'},{open:'(',close:')'},{open:'<',close:'>'},{open:'\\'',close:'\\''}],folding:{markers:{start:new RegExp(\"^\\\\s*\\\\{\\\\$REGION(\\\\s\\\\'.*\\\\')?\\\\}\"),end:new RegExp(\"^\\\\s*\\\\{\\\\$ENDREGION\\\\}\")}}};var language={defaultToken:'',tokenPostfix:'.pascal',ignoreCase:true,brackets:[{open:'{',close:'}',token:'delimiter.curly'},{open:'[',close:']',token:'delimiter.square'},{open:'(',close:')',token:'delimiter.parenthesis'},{open:'<',close:'>',token:'delimiter.angle'}],keywords:['absolute','abstract','all','and_then','array','as','asm','attribute','begin','bindable','case','class','const','contains','default','div','else','end','except','exports','external','far','file','finalization','finally','forward','generic','goto','if','implements','import','in','index','inherited','initialization','interrupt','is','label','library','mod','module','name','near','not','object','of','on','only','operator','or_else','otherwise','override','package','packed','pow','private','program','protected','public','published','interface','implementation','qualified','read','record','resident','requires','resourcestring','restricted','segment','set','shl','shr','specialize','stored','then','threadvar','to','try','type','unit','uses','var','view','virtual','dynamic','overload','reintroduce','with','write','xor','true','false','procedure','function','constructor','destructor','property','break','continue','exit','abort','while','do','for','raise','repeat','until'],typeKeywords:['boolean','double','byte','integer','shortint','char','longint','float','string'],operators:['=','>','<','<=','>=','<>',':',':=','and','or','+','-','*','/','@','&','^','%'],// we include these common regular expressions\nsymbols:/[=><:@\\^&|+\\-*\\/\\^%]+/,// The main tokenizer for our languages\ntokenizer:{root:[// identifiers and keywords\n[/[a-zA-Z_][\\w]*/,{cases:{'@keywords':{token:'keyword.$0'},'@default':'identifier'}}],// whitespace\n{include:'@whitespace'},// delimiters and operators\n[/[{}()\\[\\]]/,'@brackets'],[/[<>](?!@symbols)/,'@brackets'],[/@symbols/,{cases:{'@operators':'delimiter','@default':''}}],// numbers\n[/\\d*\\.\\d+([eE][\\-+]?\\d+)?/,'number.float'],[/\\$[0-9a-fA-F]{1,16}/,'number.hex'],[/\\d+/,'number'],// delimiter: after number because of .\\d floats\n[/[;,.]/,'delimiter'],// strings\n[/'([^'\\\\]|\\\\.)*$/,'string.invalid'],[/'/,'string','@string'],// characters\n[/'[^\\\\']'/,'string'],[/'/,'string.invalid'],[/\\#\\d+/,'string']],comment:[[/[^\\*\\}]+/,'comment'],//[/\\(\\*/,    'comment', '@push' ],    // nested comment  not allowed :-(\n[/\\}/,'comment','@pop'],[/[\\{]/,'comment']],string:[[/[^\\\\']+/,'string'],[/\\\\./,'string.escape.invalid'],[/'/,{token:'string.quote',bracket:'@close',next:'@pop'}]],whitespace:[[/[ \\t\\r\\n]+/,'white'],[/\\{/,'comment','@comment'],[/\\/\\/.*$/,'comment']]}};\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// static/js/37.5499a3c0.chunk.js","/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\n'use strict';\r\nexport var conf = {\r\n    // the default separators except `@$`\r\n    wordPattern: /(-?\\d*\\.\\d\\w*)|([^\\`\\~\\!\\#\\%\\^\\&\\*\\(\\)\\-\\=\\+\\[\\{\\]\\}\\\\\\|\\;\\:\\'\\\"\\,\\.\\<\\>\\/\\?\\s]+)/g,\r\n    comments: {\r\n        lineComment: '//',\r\n        blockComment: ['{', '}'],\r\n    },\r\n    brackets: [\r\n        ['{', '}'],\r\n        ['[', ']'],\r\n        ['(', ')'],\r\n        ['<', '>'],\r\n    ],\r\n    autoClosingPairs: [\r\n        { open: '{', close: '}' },\r\n        { open: '[', close: ']' },\r\n        { open: '(', close: ')' },\r\n        { open: '<', close: '>' },\r\n        { open: '\\'', close: '\\'' },\r\n    ],\r\n    surroundingPairs: [\r\n        { open: '{', close: '}' },\r\n        { open: '[', close: ']' },\r\n        { open: '(', close: ')' },\r\n        { open: '<', close: '>' },\r\n        { open: '\\'', close: '\\'' },\r\n    ],\r\n    folding: {\r\n        markers: {\r\n            start: new RegExp(\"^\\\\s*\\\\{\\\\$REGION(\\\\s\\\\'.*\\\\')?\\\\}\"),\r\n            end: new RegExp(\"^\\\\s*\\\\{\\\\$ENDREGION\\\\}\")\r\n        }\r\n    }\r\n};\r\nexport var language = {\r\n    defaultToken: '',\r\n    tokenPostfix: '.pascal',\r\n    ignoreCase: true,\r\n    brackets: [\r\n        { open: '{', close: '}', token: 'delimiter.curly' },\r\n        { open: '[', close: ']', token: 'delimiter.square' },\r\n        { open: '(', close: ')', token: 'delimiter.parenthesis' },\r\n        { open: '<', close: '>', token: 'delimiter.angle' }\r\n    ],\r\n    keywords: [\r\n        'absolute', 'abstract', 'all', 'and_then', 'array', 'as', 'asm',\r\n        'attribute', 'begin', 'bindable', 'case', 'class', 'const',\r\n        'contains', 'default', 'div', 'else', 'end', 'except',\r\n        'exports', 'external', 'far', 'file', 'finalization', 'finally',\r\n        'forward', 'generic', 'goto', 'if', 'implements', 'import', 'in',\r\n        'index', 'inherited', 'initialization', 'interrupt', 'is', 'label',\r\n        'library', 'mod', 'module', 'name', 'near', 'not', 'object', 'of',\r\n        'on', 'only', 'operator', 'or_else', 'otherwise', 'override',\r\n        'package', 'packed', 'pow', 'private', 'program', 'protected',\r\n        'public', 'published', 'interface', 'implementation', 'qualified',\r\n        'read', 'record', 'resident', 'requires', 'resourcestring',\r\n        'restricted', 'segment', 'set', 'shl', 'shr', 'specialize', 'stored',\r\n        'then', 'threadvar', 'to', 'try', 'type', 'unit', 'uses', 'var',\r\n        'view', 'virtual', 'dynamic', 'overload', 'reintroduce', 'with',\r\n        'write', 'xor', 'true', 'false', 'procedure', 'function',\r\n        'constructor', 'destructor', 'property', 'break', 'continue', 'exit',\r\n        'abort', 'while', 'do', 'for', 'raise', 'repeat', 'until'\r\n    ],\r\n    typeKeywords: [\r\n        'boolean', 'double', 'byte', 'integer', 'shortint', 'char',\r\n        'longint', 'float', 'string'\r\n    ],\r\n    operators: [\r\n        '=', '>', '<', '<=', '>=', '<>', ':', ':=', 'and', 'or',\r\n        '+', '-', '*', '/', '@', '&', '^', '%'\r\n    ],\r\n    // we include these common regular expressions\r\n    symbols: /[=><:@\\^&|+\\-*\\/\\^%]+/,\r\n    // The main tokenizer for our languages\r\n    tokenizer: {\r\n        root: [\r\n            // identifiers and keywords\r\n            [/[a-zA-Z_][\\w]*/, {\r\n                    cases: {\r\n                        '@keywords': { token: 'keyword.$0' },\r\n                        '@default': 'identifier'\r\n                    }\r\n                }],\r\n            // whitespace\r\n            { include: '@whitespace' },\r\n            // delimiters and operators\r\n            [/[{}()\\[\\]]/, '@brackets'],\r\n            [/[<>](?!@symbols)/, '@brackets'],\r\n            [/@symbols/, {\r\n                    cases: {\r\n                        '@operators': 'delimiter',\r\n                        '@default': ''\r\n                    }\r\n                }],\r\n            // numbers\r\n            [/\\d*\\.\\d+([eE][\\-+]?\\d+)?/, 'number.float'],\r\n            [/\\$[0-9a-fA-F]{1,16}/, 'number.hex'],\r\n            [/\\d+/, 'number'],\r\n            // delimiter: after number because of .\\d floats\r\n            [/[;,.]/, 'delimiter'],\r\n            // strings\r\n            [/'([^'\\\\]|\\\\.)*$/, 'string.invalid'],\r\n            [/'/, 'string', '@string'],\r\n            // characters\r\n            [/'[^\\\\']'/, 'string'],\r\n            [/'/, 'string.invalid'],\r\n            [/\\#\\d+/, 'string']\r\n        ],\r\n        comment: [\r\n            [/[^\\*\\}]+/, 'comment'],\r\n            //[/\\(\\*/,    'comment', '@push' ],    // nested comment  not allowed :-(\r\n            [/\\}/, 'comment', '@pop'],\r\n            [/[\\{]/, 'comment']\r\n        ],\r\n        string: [\r\n            [/[^\\\\']+/, 'string'],\r\n            [/\\\\./, 'string.escape.invalid'],\r\n            [/'/, { token: 'string.quote', bracket: '@close', next: '@pop' }]\r\n        ],\r\n        whitespace: [\r\n            [/[ \\t\\r\\n]+/, 'white'],\r\n            [/\\{/, 'comment', '@comment'],\r\n            [/\\/\\/.*$/, 'comment'],\r\n        ],\r\n    },\r\n};\r\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/monaco-editor/esm/vs/basic-languages/pascal/pascal.js"],"sourceRoot":""}