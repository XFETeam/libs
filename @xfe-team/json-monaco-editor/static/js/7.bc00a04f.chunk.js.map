{"version":3,"sources":["../static/js/7.bc00a04f.chunk.js","../node_modules/monaco-editor/esm/vs/basic-languages/twig/twig.js"],"names":["webpackJsonp","1368","module","__webpack_exports__","__webpack_require__","conf","wordPattern","comments","blockComment","brackets","autoClosingPairs","open","close","surroundingPairs","language","defaultToken","tokenPostfix","ignoreCase","keywords","tokenizer","root","token","next","commentState","blockState","include","rawDataState","variableState","stringState","interpolationState","expression","cases","doctype","comment","otherTag","script","nextEmbedded","scriptAfterType","scriptAfterTypeEquals","switchTo","scriptWithCustomType","scriptEmbedded","style","styleAfterType","styleAfterTypeEquals","styleWithCustomType","styleEmbedded"],"mappings":"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","file":"static/js/7.bc00a04f.chunk.js","sourcesContent":["webpackJsonp([7],{\n\n/***/ 1368:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\nObject.defineProperty(__webpack_exports__, \"__esModule\", { value: true });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"conf\", function() { return conf; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"language\", function() { return language; });\n/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/var conf={wordPattern:/(-?\\d*\\.\\d\\w*)|([^\\`\\~\\!\\@\\$\\^\\&\\*\\(\\)\\=\\+\\[\\{\\]\\}\\\\\\|\\;\\:\\'\\\"\\,\\.\\<\\>\\/\\s]+)/g,comments:{blockComment:['{#','#}']},brackets:[['{#','#}'],['{%','%}'],['{{','}}'],['(',')'],['[',']'],// HTML\n['<!--','-->'],['<','>']],autoClosingPairs:[{open:'{# ',close:' #}'},{open:'{% ',close:' %}'},{open:'{{ ',close:' }}'},{open:'[',close:']'},{open:'(',close:')'},{open:'\"',close:'\"'},{open:'\\'',close:'\\''}],surroundingPairs:[{open:'\"',close:'\"'},{open:'\\'',close:'\\''},// HTML\n{open:'<',close:'>'}]};var language={defaultToken:'',tokenPostfix:'',ignoreCase:true,keywords:[// (opening) tags\n'apply','autoescape','block','deprecated','do','embed','extends','flush','for','from','if','import','include','macro','sandbox','set','use','verbatim','with',// closing tags\n'endapply','endautoescape','endblock','endembed','endfor','endif','endmacro','endsandbox','endset','endwith',// literals\n'true','false'],tokenizer:{root:[// whitespace\n[/\\s+/],// Twig Tag Delimiters\n[/{#/,'comment.twig','@commentState'],[/{%[-~]?/,'delimiter.twig','@blockState'],[/{{[-~]?/,'delimiter.twig','@variableState'],// HTML\n[/<!DOCTYPE/,'metatag.html','@doctype'],[/<!--/,'comment.html','@comment'],[/(<)((?:[\\w\\-]+:)?[\\w\\-]+)(\\s*)(\\/>)/,['delimiter.html','tag.html','','delimiter.html']],[/(<)(script)/,['delimiter.html',{token:'tag.html',next:'@script'}]],[/(<)(style)/,['delimiter.html',{token:'tag.html',next:'@style'}]],[/(<)((?:[\\w\\-]+:)?[\\w\\-]+)/,['delimiter.html',{token:'tag.html',next:'@otherTag'}]],[/(<\\/)((?:[\\w\\-]+:)?[\\w\\-]+)/,['delimiter.html',{token:'tag.html',next:'@otherTag'}]],[/</,'delimiter.html'],[/[^<]+/]],/**\r\n         * Comment Tag Handling\r\n         */commentState:[[/#}/,'comment.twig','@pop'],[/./,'comment.twig']],/**\r\n         * Block Tag Handling\r\n         */blockState:[[/[-~]?%}/,'delimiter.twig','@pop'],// whitespace\n[/\\s+/],// verbatim\n// Unlike other blocks, verbatim ehas its own state\n// transition to ensure we mark its contents as strings.\n[/(verbatim)(\\s*)([-~]?%})/,['keyword.twig','',{token:'delimiter.twig',next:'@rawDataState'}]],{include:'expression'}],rawDataState:[// endverbatim\n[/({%[-~]?)(\\s*)(endverbatim)(\\s*)([-~]?%})/,['delimiter.twig','','keyword.twig','',{token:'delimiter.twig',next:'@popall'}]],[/./,'string.twig']],/**\r\n         * Variable Tag Handling\r\n         */variableState:[[/[-~]?}}/,'delimiter.twig','@pop'],{include:'expression'}],stringState:[// closing double quoted string\n[/\"/,'string.twig','@pop'],// interpolation start\n[/#{\\s*/,'string.twig','@interpolationState'],// string part\n[/[^#\"\\\\]*(?:(?:\\\\.|#(?!\\{))[^#\"\\\\]*)*/,'string.twig']],interpolationState:[// interpolation end\n[/}/,'string.twig','@pop'],{include:'expression'}],/**\r\n         * Expression Handling\r\n         */expression:[// whitespace\n[/\\s+/],// operators - math\n[/\\+|-|\\/{1,2}|%|\\*{1,2}/,'operators.twig'],// operators - logic\n[/(and|or|not|b-and|b-xor|b-or)(\\s+)/,['operators.twig','']],// operators - comparison (symbols)\n[/==|!=|<|>|>=|<=/,'operators.twig'],// operators - comparison (words)\n[/(starts with|ends with|matches)(\\s+)/,['operators.twig','']],// operators - containment\n[/(in)(\\s+)/,['operators.twig','']],// operators - test\n[/(is)(\\s+)/,['operators.twig','']],// operators - misc\n[/\\||~|:|\\.{1,2}|\\?{1,2}/,'operators.twig'],// names\n[/[^\\W\\d][\\w]*/,{cases:{'@keywords':'keyword.twig','@default':'variable.twig'}}],// numbers\n[/\\d+(\\.\\d+)?/,'number.twig'],// punctuation\n[/\\(|\\)|\\[|\\]|{|}|,/,'delimiter.twig'],// strings\n[/\"([^#\"\\\\]*(?:\\\\.[^#\"\\\\]*)*)\"|\\'([^\\'\\\\]*(?:\\\\.[^\\'\\\\]*)*)\\'/,'string.twig'],// opening double quoted string\n[/\"/,'string.twig','@stringState'],// misc syntactic constructs\n// These are not operators per se, but for the purposes of lexical analysis we\n// can treat them as such.\n// arrow functions\n[/=>/,'operators.twig'],// assignment\n[/=/,'operators.twig']],/**\r\n         * HTML\r\n         */doctype:[[/[^>]+/,'metatag.content.html'],[/>/,'metatag.html','@pop']],comment:[[/-->/,'comment.html','@pop'],[/[^-]+/,'comment.content.html'],[/./,'comment.content.html']],otherTag:[[/\\/?>/,'delimiter.html','@pop'],[/\"([^\"]*)\"/,'attribute.value.html'],[/'([^']*)'/,'attribute.value.html'],[/[\\w\\-]+/,'attribute.name.html'],[/=/,'delimiter.html'],[/[ \\t\\r\\n]+/]],// -- BEGIN <script> tags handling\n// After <script\nscript:[[/type/,'attribute.name.html','@scriptAfterType'],[/\"([^\"]*)\"/,'attribute.value.html'],[/'([^']*)'/,'attribute.value.html'],[/[\\w\\-]+/,'attribute.name.html'],[/=/,'delimiter.html'],[/>/,{token:'delimiter.html',next:'@scriptEmbedded',nextEmbedded:'text/javascript'}],[/[ \\t\\r\\n]+/],[/(<\\/)(script\\s*)(>)/,['delimiter.html','tag.html',{token:'delimiter.html',next:'@pop'}]]],// After <script ... type\nscriptAfterType:[[/=/,'delimiter.html','@scriptAfterTypeEquals'],[/>/,{token:'delimiter.html',next:'@scriptEmbedded',nextEmbedded:'text/javascript'}],[/[ \\t\\r\\n]+/],[/<\\/script\\s*>/,{token:'@rematch',next:'@pop'}]],// After <script ... type =\nscriptAfterTypeEquals:[[/\"([^\"]*)\"/,{token:'attribute.value.html',switchTo:'@scriptWithCustomType.$1'}],[/'([^']*)'/,{token:'attribute.value.html',switchTo:'@scriptWithCustomType.$1'}],[/>/,{token:'delimiter.html',next:'@scriptEmbedded',nextEmbedded:'text/javascript'}],[/[ \\t\\r\\n]+/],[/<\\/script\\s*>/,{token:'@rematch',next:'@pop'}]],// After <script ... type = $S2\nscriptWithCustomType:[[/>/,{token:'delimiter.html',next:'@scriptEmbedded.$S2',nextEmbedded:'$S2'}],[/\"([^\"]*)\"/,'attribute.value.html'],[/'([^']*)'/,'attribute.value.html'],[/[\\w\\-]+/,'attribute.name.html'],[/=/,'delimiter.html'],[/[ \\t\\r\\n]+/],[/<\\/script\\s*>/,{token:'@rematch',next:'@pop'}]],scriptEmbedded:[[/<\\/script/,{token:'@rematch',next:'@pop',nextEmbedded:'@pop'}],[/[^<]+/,'']],// -- END <script> tags handling\n// -- BEGIN <style> tags handling\n// After <style\nstyle:[[/type/,'attribute.name.html','@styleAfterType'],[/\"([^\"]*)\"/,'attribute.value.html'],[/'([^']*)'/,'attribute.value.html'],[/[\\w\\-]+/,'attribute.name.html'],[/=/,'delimiter.html'],[/>/,{token:'delimiter.html',next:'@styleEmbedded',nextEmbedded:'text/css'}],[/[ \\t\\r\\n]+/],[/(<\\/)(style\\s*)(>)/,['delimiter.html','tag.html',{token:'delimiter.html',next:'@pop'}]]],// After <style ... type\nstyleAfterType:[[/=/,'delimiter.html','@styleAfterTypeEquals'],[/>/,{token:'delimiter.html',next:'@styleEmbedded',nextEmbedded:'text/css'}],[/[ \\t\\r\\n]+/],[/<\\/style\\s*>/,{token:'@rematch',next:'@pop'}]],// After <style ... type =\nstyleAfterTypeEquals:[[/\"([^\"]*)\"/,{token:'attribute.value.html',switchTo:'@styleWithCustomType.$1'}],[/'([^']*)'/,{token:'attribute.value.html',switchTo:'@styleWithCustomType.$1'}],[/>/,{token:'delimiter.html',next:'@styleEmbedded',nextEmbedded:'text/css'}],[/[ \\t\\r\\n]+/],[/<\\/style\\s*>/,{token:'@rematch',next:'@pop'}]],// After <style ... type = $S2\nstyleWithCustomType:[[/>/,{token:'delimiter.html',next:'@styleEmbedded.$S2',nextEmbedded:'$S2'}],[/\"([^\"]*)\"/,'attribute.value.html'],[/'([^']*)'/,'attribute.value.html'],[/[\\w\\-]+/,'attribute.name.html'],[/=/,'delimiter.html'],[/[ \\t\\r\\n]+/],[/<\\/style\\s*>/,{token:'@rematch',next:'@pop'}]],styleEmbedded:[[/<\\/style/,{token:'@rematch',next:'@pop',nextEmbedded:'@pop'}],[/[^<]+/,'']]}};\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// static/js/7.bc00a04f.chunk.js","/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\n'use strict';\r\nexport var conf = {\r\n    wordPattern: /(-?\\d*\\.\\d\\w*)|([^\\`\\~\\!\\@\\$\\^\\&\\*\\(\\)\\=\\+\\[\\{\\]\\}\\\\\\|\\;\\:\\'\\\"\\,\\.\\<\\>\\/\\s]+)/g,\r\n    comments: {\r\n        blockComment: ['{#', '#}'],\r\n    },\r\n    brackets: [\r\n        ['{#', '#}'],\r\n        ['{%', '%}'],\r\n        ['{{', '}}'],\r\n        ['(', ')'],\r\n        ['[', ']'],\r\n        // HTML\r\n        ['<!--', '-->'],\r\n        ['<', '>'],\r\n    ],\r\n    autoClosingPairs: [\r\n        { open: '{# ', close: ' #}' },\r\n        { open: '{% ', close: ' %}' },\r\n        { open: '{{ ', close: ' }}' },\r\n        { open: '[', close: ']' },\r\n        { open: '(', close: ')' },\r\n        { open: '\"', close: '\"' },\r\n        { open: '\\'', close: '\\'' },\r\n    ],\r\n    surroundingPairs: [\r\n        { open: '\"', close: '\"' },\r\n        { open: '\\'', close: '\\'' },\r\n        // HTML\r\n        { open: '<', close: '>' },\r\n    ],\r\n};\r\nexport var language = {\r\n    defaultToken: '',\r\n    tokenPostfix: '',\r\n    ignoreCase: true,\r\n    keywords: [\r\n        // (opening) tags\r\n        'apply', 'autoescape', 'block', 'deprecated', 'do', 'embed', 'extends',\r\n        'flush', 'for', 'from', 'if', 'import', 'include', 'macro', 'sandbox',\r\n        'set', 'use', 'verbatim', 'with',\r\n        // closing tags\r\n        'endapply', 'endautoescape', 'endblock', 'endembed', 'endfor', 'endif',\r\n        'endmacro', 'endsandbox', 'endset', 'endwith',\r\n        // literals\r\n        'true', 'false',\r\n    ],\r\n    tokenizer: {\r\n        root: [\r\n            // whitespace\r\n            [/\\s+/],\r\n            // Twig Tag Delimiters\r\n            [/{#/, 'comment.twig', '@commentState'],\r\n            [/{%[-~]?/, 'delimiter.twig', '@blockState'],\r\n            [/{{[-~]?/, 'delimiter.twig', '@variableState'],\r\n            // HTML\r\n            [/<!DOCTYPE/, 'metatag.html', '@doctype'],\r\n            [/<!--/, 'comment.html', '@comment'],\r\n            [/(<)((?:[\\w\\-]+:)?[\\w\\-]+)(\\s*)(\\/>)/, ['delimiter.html', 'tag.html', '', 'delimiter.html']],\r\n            [/(<)(script)/, ['delimiter.html', { token: 'tag.html', next: '@script' }]],\r\n            [/(<)(style)/, ['delimiter.html', { token: 'tag.html', next: '@style' }]],\r\n            [/(<)((?:[\\w\\-]+:)?[\\w\\-]+)/, ['delimiter.html', { token: 'tag.html', next: '@otherTag' }]],\r\n            [/(<\\/)((?:[\\w\\-]+:)?[\\w\\-]+)/, ['delimiter.html', { token: 'tag.html', next: '@otherTag' }]],\r\n            [/</, 'delimiter.html'],\r\n            [/[^<]+/],\r\n        ],\r\n        /**\r\n         * Comment Tag Handling\r\n         */\r\n        commentState: [\r\n            [/#}/, 'comment.twig', '@pop'],\r\n            [/./, 'comment.twig'],\r\n        ],\r\n        /**\r\n         * Block Tag Handling\r\n         */\r\n        blockState: [\r\n            [/[-~]?%}/, 'delimiter.twig', '@pop'],\r\n            // whitespace\r\n            [/\\s+/],\r\n            // verbatim\r\n            // Unlike other blocks, verbatim ehas its own state\r\n            // transition to ensure we mark its contents as strings.\r\n            [/(verbatim)(\\s*)([-~]?%})/, [\r\n                    'keyword.twig',\r\n                    '',\r\n                    { token: 'delimiter.twig', next: '@rawDataState' },\r\n                ]],\r\n            { include: 'expression' }\r\n        ],\r\n        rawDataState: [\r\n            // endverbatim\r\n            [/({%[-~]?)(\\s*)(endverbatim)(\\s*)([-~]?%})/, [\r\n                    'delimiter.twig',\r\n                    '',\r\n                    'keyword.twig',\r\n                    '',\r\n                    { token: 'delimiter.twig', next: '@popall' },\r\n                ]],\r\n            [/./, 'string.twig'],\r\n        ],\r\n        /**\r\n         * Variable Tag Handling\r\n         */\r\n        variableState: [\r\n            [/[-~]?}}/, 'delimiter.twig', '@pop'],\r\n            { include: 'expression' },\r\n        ],\r\n        stringState: [\r\n            // closing double quoted string\r\n            [/\"/, 'string.twig', '@pop'],\r\n            // interpolation start\r\n            [/#{\\s*/, 'string.twig', '@interpolationState'],\r\n            // string part\r\n            [/[^#\"\\\\]*(?:(?:\\\\.|#(?!\\{))[^#\"\\\\]*)*/, 'string.twig'],\r\n        ],\r\n        interpolationState: [\r\n            // interpolation end\r\n            [/}/, 'string.twig', '@pop'],\r\n            { include: 'expression' },\r\n        ],\r\n        /**\r\n         * Expression Handling\r\n         */\r\n        expression: [\r\n            // whitespace\r\n            [/\\s+/],\r\n            // operators - math\r\n            [/\\+|-|\\/{1,2}|%|\\*{1,2}/, 'operators.twig'],\r\n            // operators - logic\r\n            [/(and|or|not|b-and|b-xor|b-or)(\\s+)/, ['operators.twig', '']],\r\n            // operators - comparison (symbols)\r\n            [/==|!=|<|>|>=|<=/, 'operators.twig'],\r\n            // operators - comparison (words)\r\n            [/(starts with|ends with|matches)(\\s+)/, ['operators.twig', '']],\r\n            // operators - containment\r\n            [/(in)(\\s+)/, ['operators.twig', '']],\r\n            // operators - test\r\n            [/(is)(\\s+)/, ['operators.twig', '']],\r\n            // operators - misc\r\n            [/\\||~|:|\\.{1,2}|\\?{1,2}/, 'operators.twig'],\r\n            // names\r\n            [/[^\\W\\d][\\w]*/, {\r\n                    cases: {\r\n                        '@keywords': 'keyword.twig',\r\n                        '@default': 'variable.twig'\r\n                    }\r\n                }],\r\n            // numbers\r\n            [/\\d+(\\.\\d+)?/, 'number.twig'],\r\n            // punctuation\r\n            [/\\(|\\)|\\[|\\]|{|}|,/, 'delimiter.twig'],\r\n            // strings\r\n            [/\"([^#\"\\\\]*(?:\\\\.[^#\"\\\\]*)*)\"|\\'([^\\'\\\\]*(?:\\\\.[^\\'\\\\]*)*)\\'/, 'string.twig'],\r\n            // opening double quoted string\r\n            [/\"/, 'string.twig', '@stringState'],\r\n            // misc syntactic constructs\r\n            // These are not operators per se, but for the purposes of lexical analysis we\r\n            // can treat them as such.\r\n            // arrow functions\r\n            [/=>/, 'operators.twig'],\r\n            // assignment\r\n            [/=/, 'operators.twig'],\r\n        ],\r\n        /**\r\n         * HTML\r\n         */\r\n        doctype: [\r\n            [/[^>]+/, 'metatag.content.html'],\r\n            [/>/, 'metatag.html', '@pop'],\r\n        ],\r\n        comment: [\r\n            [/-->/, 'comment.html', '@pop'],\r\n            [/[^-]+/, 'comment.content.html'],\r\n            [/./, 'comment.content.html']\r\n        ],\r\n        otherTag: [\r\n            [/\\/?>/, 'delimiter.html', '@pop'],\r\n            [/\"([^\"]*)\"/, 'attribute.value.html'],\r\n            [/'([^']*)'/, 'attribute.value.html'],\r\n            [/[\\w\\-]+/, 'attribute.name.html'],\r\n            [/=/, 'delimiter.html'],\r\n            [/[ \\t\\r\\n]+/],\r\n        ],\r\n        // -- BEGIN <script> tags handling\r\n        // After <script\r\n        script: [\r\n            [/type/, 'attribute.name.html', '@scriptAfterType'],\r\n            [/\"([^\"]*)\"/, 'attribute.value.html'],\r\n            [/'([^']*)'/, 'attribute.value.html'],\r\n            [/[\\w\\-]+/, 'attribute.name.html'],\r\n            [/=/, 'delimiter.html'],\r\n            [/>/, { token: 'delimiter.html', next: '@scriptEmbedded', nextEmbedded: 'text/javascript' }],\r\n            [/[ \\t\\r\\n]+/],\r\n            [/(<\\/)(script\\s*)(>)/, ['delimiter.html', 'tag.html', { token: 'delimiter.html', next: '@pop' }]]\r\n        ],\r\n        // After <script ... type\r\n        scriptAfterType: [\r\n            [/=/, 'delimiter.html', '@scriptAfterTypeEquals'],\r\n            [/>/, { token: 'delimiter.html', next: '@scriptEmbedded', nextEmbedded: 'text/javascript' }],\r\n            [/[ \\t\\r\\n]+/],\r\n            [/<\\/script\\s*>/, { token: '@rematch', next: '@pop' }]\r\n        ],\r\n        // After <script ... type =\r\n        scriptAfterTypeEquals: [\r\n            [/\"([^\"]*)\"/, { token: 'attribute.value.html', switchTo: '@scriptWithCustomType.$1' }],\r\n            [/'([^']*)'/, { token: 'attribute.value.html', switchTo: '@scriptWithCustomType.$1' }],\r\n            [/>/, { token: 'delimiter.html', next: '@scriptEmbedded', nextEmbedded: 'text/javascript' }],\r\n            [/[ \\t\\r\\n]+/],\r\n            [/<\\/script\\s*>/, { token: '@rematch', next: '@pop' }]\r\n        ],\r\n        // After <script ... type = $S2\r\n        scriptWithCustomType: [\r\n            [/>/, { token: 'delimiter.html', next: '@scriptEmbedded.$S2', nextEmbedded: '$S2' }],\r\n            [/\"([^\"]*)\"/, 'attribute.value.html'],\r\n            [/'([^']*)'/, 'attribute.value.html'],\r\n            [/[\\w\\-]+/, 'attribute.name.html'],\r\n            [/=/, 'delimiter.html'],\r\n            [/[ \\t\\r\\n]+/],\r\n            [/<\\/script\\s*>/, { token: '@rematch', next: '@pop' }]\r\n        ],\r\n        scriptEmbedded: [\r\n            [/<\\/script/, { token: '@rematch', next: '@pop', nextEmbedded: '@pop' }],\r\n            [/[^<]+/, '']\r\n        ],\r\n        // -- END <script> tags handling\r\n        // -- BEGIN <style> tags handling\r\n        // After <style\r\n        style: [\r\n            [/type/, 'attribute.name.html', '@styleAfterType'],\r\n            [/\"([^\"]*)\"/, 'attribute.value.html'],\r\n            [/'([^']*)'/, 'attribute.value.html'],\r\n            [/[\\w\\-]+/, 'attribute.name.html'],\r\n            [/=/, 'delimiter.html'],\r\n            [/>/, { token: 'delimiter.html', next: '@styleEmbedded', nextEmbedded: 'text/css' }],\r\n            [/[ \\t\\r\\n]+/],\r\n            [/(<\\/)(style\\s*)(>)/, ['delimiter.html', 'tag.html', { token: 'delimiter.html', next: '@pop' }]]\r\n        ],\r\n        // After <style ... type\r\n        styleAfterType: [\r\n            [/=/, 'delimiter.html', '@styleAfterTypeEquals'],\r\n            [/>/, { token: 'delimiter.html', next: '@styleEmbedded', nextEmbedded: 'text/css' }],\r\n            [/[ \\t\\r\\n]+/],\r\n            [/<\\/style\\s*>/, { token: '@rematch', next: '@pop' }]\r\n        ],\r\n        // After <style ... type =\r\n        styleAfterTypeEquals: [\r\n            [/\"([^\"]*)\"/, { token: 'attribute.value.html', switchTo: '@styleWithCustomType.$1' }],\r\n            [/'([^']*)'/, { token: 'attribute.value.html', switchTo: '@styleWithCustomType.$1' }],\r\n            [/>/, { token: 'delimiter.html', next: '@styleEmbedded', nextEmbedded: 'text/css' }],\r\n            [/[ \\t\\r\\n]+/],\r\n            [/<\\/style\\s*>/, { token: '@rematch', next: '@pop' }]\r\n        ],\r\n        // After <style ... type = $S2\r\n        styleWithCustomType: [\r\n            [/>/, { token: 'delimiter.html', next: '@styleEmbedded.$S2', nextEmbedded: '$S2' }],\r\n            [/\"([^\"]*)\"/, 'attribute.value.html'],\r\n            [/'([^']*)'/, 'attribute.value.html'],\r\n            [/[\\w\\-]+/, 'attribute.name.html'],\r\n            [/=/, 'delimiter.html'],\r\n            [/[ \\t\\r\\n]+/],\r\n            [/<\\/style\\s*>/, { token: '@rematch', next: '@pop' }]\r\n        ],\r\n        styleEmbedded: [\r\n            [/<\\/style/, { token: '@rematch', next: '@pop', nextEmbedded: '@pop' }],\r\n            [/[^<]+/, '']\r\n        ],\r\n    }\r\n};\r\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/monaco-editor/esm/vs/basic-languages/twig/twig.js"],"sourceRoot":""}