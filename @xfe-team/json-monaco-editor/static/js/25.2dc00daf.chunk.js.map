{"version":3,"sources":["../static/js/25.2dc00daf.chunk.js","../node_modules/monaco-editor/esm/vs/basic-languages/python/python.js"],"names":["webpackJsonp","1350","module","__webpack_exports__","__webpack_require__","_monaco","monaco","self","conf","comments","lineComment","blockComment","brackets","autoClosingPairs","open","close","notIn","surroundingPairs","onEnterRules","beforeText","RegExp","action","indentAction","languages","IndentAction","Indent","folding","offSide","markers","start","end","language","defaultToken","tokenPostfix","keywords","token","tokenizer","root","include","cases","whitespace","endDocString","endDblDocString","numbers","strings","stringBody","dblStringBody"],"mappings":"AAAAA,cAAc,KAERC,KACA,SAAUC,EAAQC,EAAqBC,GAE7C,YCLA,2HAMA,IAAIC,GAA6B,oBAAXC,QAAyBC,KAAKD,OAASA,OAClDE,GACPC,UACIC,YAAa,IACbC,cAAe,MAAU,QAE7BC,WACK,IAAK,MACL,IAAK,MACL,IAAK,MAEVC,mBACMC,KAAM,IAAKC,MAAO,MAClBD,KAAM,IAAKC,MAAO,MAClBD,KAAM,IAAKC,MAAO,MAClBD,KAAM,IAAKC,MAAO,IAAKC,OAAQ,YAC/BF,KAAM,IAAMC,MAAO,IAAMC,OAAQ,SAAU,aAEjDC,mBACMH,KAAM,IAAKC,MAAO,MAClBD,KAAM,IAAKC,MAAO,MAClBD,KAAM,IAAKC,MAAO,MAClBD,KAAM,IAAKC,MAAO,MAClBD,KAAM,IAAMC,MAAO,MAEzBG,eAEQC,WAAY,GAAIC,QAAO,oFACvBC,QAAUC,aAAcjB,EAAQkB,UAAUC,aAAaC,UAG/DC,SACIC,SAAS,EACTC,SACIC,MAAO,GAAIT,QAAO,mBAClBU,IAAK,GAAIV,QAAO,yBAIjBW,GACPC,aAAc,GACdC,aAAc,UACdC,UACI,MACA,KACA,SACA,QACA,QACA,WACA,MACA,MACA,OACA,OACA,SACA,OACA,UACA,MACA,OACA,SACA,KACA,SACA,KACA,KACA,SACA,OACA,MACA,KACA,OACA,QACA,QACA,SACA,OACA,MACA,QACA,OACA,QACA,MACA,QACA,OACA,UACA,MACA,MACA,MACA,MACA,QACA,aACA,MACA,OACA,SACA,YACA,WACA,MACA,cACA,MACA,SACA,UACA,UACA,UACA,OACA,MACA,SACA,YACA,OACA,WACA,OACA,SACA,SACA,YACA,UACA,UACA,UACA,OACA,OACA,KACA,QACA,SACA,aACA,aACA,OACA,MACA,SACA,OACA,MACA,MACA,aACA,MACA,OACA,SACA,MACA,OACA,MACA,MACA,QACA,WACA,WACA,QACA,YACA,SACA,SACA,OACA,WACA,QACA,MACA,UACA,QACA,SACA,eACA,MACA,MACA,QACA,QACA,OACA,SACA,UACA,OACA,SACA,MACA,OACA,QACA,WACA,cACA,cACA,YACA,YACA,WACA,UACA,iBACA,WACA,cAEJtB,WACME,KAAM,IAAKC,MAAO,IAAKoB,MAAO,oBAC9BrB,KAAM,IAAKC,MAAO,IAAKoB,MAAO,sBAC9BrB,KAAM,IAAKC,MAAO,IAAKoB,MAAO,0BAEpCC,WACIC,OACMC,QAAS,gBACTA,QAAS,aACTA,QAAS,aACV,QAAS,cACT,aAAc,cACd,eAAgB,QAChB,eACOC,OACI,YAAa,UACb,WAAY,iBAK5BC,aACK,MAAO,UACP,UAAW,YACX,MAAO,SAAU,kBACjB,MAAO,SAAU,qBAEtBC,eACK,QAAS,WACT,MAAO,WACP,MAAO,SAAU,YACjB,IAAK,WAEVC,kBACK,QAAS,WACT,MAAO,WACP,MAAO,SAAU,YACjB,IAAK,WAGVC,UACK,mCAAoC,eACpC,0CAA2C,WAGhDC,UACK,KAAM,gBAAiB,YACvB,IAAK,gBAAiB,gBACtB,KAAM,gBAAiB,YACvB,IAAK,gBAAiB,mBAE3BC,aACK,WAAY,SAAU,YACtB,UAAW,WACX,MAAO,WACP,IAAK,gBAAiB,YACtB,MAAO,WAEZC,gBACK,WAAY,SAAU,YACtB,UAAW,WACX,MAAO,WACP,IAAK,gBAAiB,YACtB,MAAO","file":"static/js/25.2dc00daf.chunk.js","sourcesContent":["webpackJsonp([25],{\n\n/***/ 1350:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\nObject.defineProperty(__webpack_exports__, \"__esModule\", { value: true });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"conf\", function() { return conf; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"language\", function() { return language; });\n/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/// Allow for running under nodejs/requirejs in tests\nvar _monaco=typeof monaco==='undefined'?self.monaco:monaco;var conf={comments:{lineComment:'#',blockComment:['\\'\\'\\'','\\'\\'\\'']},brackets:[['{','}'],['[',']'],['(',')']],autoClosingPairs:[{open:'{',close:'}'},{open:'[',close:']'},{open:'(',close:')'},{open:'\"',close:'\"',notIn:['string']},{open:'\\'',close:'\\'',notIn:['string','comment']}],surroundingPairs:[{open:'{',close:'}'},{open:'[',close:']'},{open:'(',close:')'},{open:'\"',close:'\"'},{open:'\\'',close:'\\''}],onEnterRules:[{beforeText:new RegExp(\"^\\\\s*(?:def|class|for|if|elif|else|while|try|with|finally|except|async).*?:\\\\s*$\"),action:{indentAction:_monaco.languages.IndentAction.Indent}}],folding:{offSide:true,markers:{start:new RegExp(\"^\\\\s*#region\\\\b\"),end:new RegExp(\"^\\\\s*#endregion\\\\b\")}}};var language={defaultToken:'',tokenPostfix:'.python',keywords:['and','as','assert','break','class','continue','def','del','elif','else','except','exec','finally','for','from','global','if','import','in','is','lambda','None','not','or','pass','print','raise','return','self','try','while','with','yield','int','float','long','complex','hex','abs','all','any','apply','basestring','bin','bool','buffer','bytearray','callable','chr','classmethod','cmp','coerce','compile','complex','delattr','dict','dir','divmod','enumerate','eval','execfile','file','filter','format','frozenset','getattr','globals','hasattr','hash','help','id','input','intern','isinstance','issubclass','iter','len','locals','list','map','max','memoryview','min','next','object','oct','open','ord','pow','print','property','reversed','range','raw_input','reduce','reload','repr','reversed','round','set','setattr','slice','sorted','staticmethod','str','sum','super','tuple','type','unichr','unicode','vars','xrange','zip','True','False','__dict__','__methods__','__members__','__class__','__bases__','__name__','__mro__','__subclasses__','__init__','__import__'],brackets:[{open:'{',close:'}',token:'delimiter.curly'},{open:'[',close:']',token:'delimiter.bracket'},{open:'(',close:')',token:'delimiter.parenthesis'}],tokenizer:{root:[{include:'@whitespace'},{include:'@numbers'},{include:'@strings'},[/[,:;]/,'delimiter'],[/[{}\\[\\]()]/,'@brackets'],[/@[a-zA-Z]\\w*/,'tag'],[/[a-zA-Z]\\w*/,{cases:{'@keywords':'keyword','@default':'identifier'}}]],// Deal with white space, including single and multi-line comments\nwhitespace:[[/\\s+/,'white'],[/(^#.*$)/,'comment'],[/'''/,'string','@endDocString'],[/\"\"\"/,'string','@endDblDocString']],endDocString:[[/[^']+/,'string'],[/\\\\'/,'string'],[/'''/,'string','@popall'],[/'/,'string']],endDblDocString:[[/[^\"]+/,'string'],[/\\\\\"/,'string'],[/\"\"\"/,'string','@popall'],[/\"/,'string']],// Recognize hex, negatives, decimals, imaginaries, longs, and scientific notation\nnumbers:[[/-?0x([abcdef]|[ABCDEF]|\\d)+[lL]?/,'number.hex'],[/-?(\\d*\\.)?\\d+([eE][+\\-]?\\d+)?[jJ]?[lL]?/,'number']],// Recognize strings, including those broken across lines with \\ (but not without)\nstrings:[[/'$/,'string.escape','@popall'],[/'/,'string.escape','@stringBody'],[/\"$/,'string.escape','@popall'],[/\"/,'string.escape','@dblStringBody']],stringBody:[[/[^\\\\']+$/,'string','@popall'],[/[^\\\\']+/,'string'],[/\\\\./,'string'],[/'/,'string.escape','@popall'],[/\\\\$/,'string']],dblStringBody:[[/[^\\\\\"]+$/,'string','@popall'],[/[^\\\\\"]+/,'string'],[/\\\\./,'string'],[/\"/,'string.escape','@popall'],[/\\\\$/,'string']]}};\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// static/js/25.2dc00daf.chunk.js","/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\n'use strict';\r\n// Allow for running under nodejs/requirejs in tests\r\nvar _monaco = (typeof monaco === 'undefined' ? self.monaco : monaco);\r\nexport var conf = {\r\n    comments: {\r\n        lineComment: '#',\r\n        blockComment: ['\\'\\'\\'', '\\'\\'\\''],\r\n    },\r\n    brackets: [\r\n        ['{', '}'],\r\n        ['[', ']'],\r\n        ['(', ')']\r\n    ],\r\n    autoClosingPairs: [\r\n        { open: '{', close: '}' },\r\n        { open: '[', close: ']' },\r\n        { open: '(', close: ')' },\r\n        { open: '\"', close: '\"', notIn: ['string'] },\r\n        { open: '\\'', close: '\\'', notIn: ['string', 'comment'] },\r\n    ],\r\n    surroundingPairs: [\r\n        { open: '{', close: '}' },\r\n        { open: '[', close: ']' },\r\n        { open: '(', close: ')' },\r\n        { open: '\"', close: '\"' },\r\n        { open: '\\'', close: '\\'' },\r\n    ],\r\n    onEnterRules: [\r\n        {\r\n            beforeText: new RegExp(\"^\\\\s*(?:def|class|for|if|elif|else|while|try|with|finally|except|async).*?:\\\\s*$\"),\r\n            action: { indentAction: _monaco.languages.IndentAction.Indent }\r\n        }\r\n    ],\r\n    folding: {\r\n        offSide: true,\r\n        markers: {\r\n            start: new RegExp(\"^\\\\s*#region\\\\b\"),\r\n            end: new RegExp(\"^\\\\s*#endregion\\\\b\")\r\n        }\r\n    }\r\n};\r\nexport var language = {\r\n    defaultToken: '',\r\n    tokenPostfix: '.python',\r\n    keywords: [\r\n        'and',\r\n        'as',\r\n        'assert',\r\n        'break',\r\n        'class',\r\n        'continue',\r\n        'def',\r\n        'del',\r\n        'elif',\r\n        'else',\r\n        'except',\r\n        'exec',\r\n        'finally',\r\n        'for',\r\n        'from',\r\n        'global',\r\n        'if',\r\n        'import',\r\n        'in',\r\n        'is',\r\n        'lambda',\r\n        'None',\r\n        'not',\r\n        'or',\r\n        'pass',\r\n        'print',\r\n        'raise',\r\n        'return',\r\n        'self',\r\n        'try',\r\n        'while',\r\n        'with',\r\n        'yield',\r\n        'int',\r\n        'float',\r\n        'long',\r\n        'complex',\r\n        'hex',\r\n        'abs',\r\n        'all',\r\n        'any',\r\n        'apply',\r\n        'basestring',\r\n        'bin',\r\n        'bool',\r\n        'buffer',\r\n        'bytearray',\r\n        'callable',\r\n        'chr',\r\n        'classmethod',\r\n        'cmp',\r\n        'coerce',\r\n        'compile',\r\n        'complex',\r\n        'delattr',\r\n        'dict',\r\n        'dir',\r\n        'divmod',\r\n        'enumerate',\r\n        'eval',\r\n        'execfile',\r\n        'file',\r\n        'filter',\r\n        'format',\r\n        'frozenset',\r\n        'getattr',\r\n        'globals',\r\n        'hasattr',\r\n        'hash',\r\n        'help',\r\n        'id',\r\n        'input',\r\n        'intern',\r\n        'isinstance',\r\n        'issubclass',\r\n        'iter',\r\n        'len',\r\n        'locals',\r\n        'list',\r\n        'map',\r\n        'max',\r\n        'memoryview',\r\n        'min',\r\n        'next',\r\n        'object',\r\n        'oct',\r\n        'open',\r\n        'ord',\r\n        'pow',\r\n        'print',\r\n        'property',\r\n        'reversed',\r\n        'range',\r\n        'raw_input',\r\n        'reduce',\r\n        'reload',\r\n        'repr',\r\n        'reversed',\r\n        'round',\r\n        'set',\r\n        'setattr',\r\n        'slice',\r\n        'sorted',\r\n        'staticmethod',\r\n        'str',\r\n        'sum',\r\n        'super',\r\n        'tuple',\r\n        'type',\r\n        'unichr',\r\n        'unicode',\r\n        'vars',\r\n        'xrange',\r\n        'zip',\r\n        'True',\r\n        'False',\r\n        '__dict__',\r\n        '__methods__',\r\n        '__members__',\r\n        '__class__',\r\n        '__bases__',\r\n        '__name__',\r\n        '__mro__',\r\n        '__subclasses__',\r\n        '__init__',\r\n        '__import__'\r\n    ],\r\n    brackets: [\r\n        { open: '{', close: '}', token: 'delimiter.curly' },\r\n        { open: '[', close: ']', token: 'delimiter.bracket' },\r\n        { open: '(', close: ')', token: 'delimiter.parenthesis' }\r\n    ],\r\n    tokenizer: {\r\n        root: [\r\n            { include: '@whitespace' },\r\n            { include: '@numbers' },\r\n            { include: '@strings' },\r\n            [/[,:;]/, 'delimiter'],\r\n            [/[{}\\[\\]()]/, '@brackets'],\r\n            [/@[a-zA-Z]\\w*/, 'tag'],\r\n            [/[a-zA-Z]\\w*/, {\r\n                    cases: {\r\n                        '@keywords': 'keyword',\r\n                        '@default': 'identifier'\r\n                    }\r\n                }]\r\n        ],\r\n        // Deal with white space, including single and multi-line comments\r\n        whitespace: [\r\n            [/\\s+/, 'white'],\r\n            [/(^#.*$)/, 'comment'],\r\n            [/'''/, 'string', '@endDocString'],\r\n            [/\"\"\"/, 'string', '@endDblDocString']\r\n        ],\r\n        endDocString: [\r\n            [/[^']+/, 'string'],\r\n            [/\\\\'/, 'string'],\r\n            [/'''/, 'string', '@popall'],\r\n            [/'/, 'string']\r\n        ],\r\n        endDblDocString: [\r\n            [/[^\"]+/, 'string'],\r\n            [/\\\\\"/, 'string'],\r\n            [/\"\"\"/, 'string', '@popall'],\r\n            [/\"/, 'string']\r\n        ],\r\n        // Recognize hex, negatives, decimals, imaginaries, longs, and scientific notation\r\n        numbers: [\r\n            [/-?0x([abcdef]|[ABCDEF]|\\d)+[lL]?/, 'number.hex'],\r\n            [/-?(\\d*\\.)?\\d+([eE][+\\-]?\\d+)?[jJ]?[lL]?/, 'number']\r\n        ],\r\n        // Recognize strings, including those broken across lines with \\ (but not without)\r\n        strings: [\r\n            [/'$/, 'string.escape', '@popall'],\r\n            [/'/, 'string.escape', '@stringBody'],\r\n            [/\"$/, 'string.escape', '@popall'],\r\n            [/\"/, 'string.escape', '@dblStringBody']\r\n        ],\r\n        stringBody: [\r\n            [/[^\\\\']+$/, 'string', '@popall'],\r\n            [/[^\\\\']+/, 'string'],\r\n            [/\\\\./, 'string'],\r\n            [/'/, 'string.escape', '@popall'],\r\n            [/\\\\$/, 'string']\r\n        ],\r\n        dblStringBody: [\r\n            [/[^\\\\\"]+$/, 'string', '@popall'],\r\n            [/[^\\\\\"]+/, 'string'],\r\n            [/\\\\./, 'string'],\r\n            [/\"/, 'string.escape', '@popall'],\r\n            [/\\\\$/, 'string']\r\n        ]\r\n    }\r\n};\r\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/monaco-editor/esm/vs/basic-languages/python/python.js"],"sourceRoot":""}