{"version":3,"sources":["../static/js/22.f6f17a6b.chunk.js","../node_modules/monaco-editor/esm/vs/basic-languages/ruby/ruby.js"],"names":["webpackJsonp","1359","module","__webpack_exports__","__webpack_require__","conf","comments","lineComment","blockComment","brackets","autoClosingPairs","open","close","surroundingPairs","indentationRules","increaseIndentPattern","RegExp","decreaseIndentPattern","language","tokenPostfix","keywords","keywordops","builtins","declarations","linedecls","operators","token","symbols","escape","escapes","decpart","decimal","delim","heredelim","regexpctl","regexpesc","tokenizer","root","cases","next","include","dodecl","switchTo","modifier","sstring","dstring","heredoc","interpolated","interpolated_compound","pregexp","regexp","regexcontrol","regexrange","regexpcomment","pstring","qstring","qqstring","whitespace","comment"],"mappings":"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","file":"static/js/22.f6f17a6b.chunk.js","sourcesContent":["webpackJsonp([22],{\n\n/***/ 1359:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\nObject.defineProperty(__webpack_exports__, \"__esModule\", { value: true });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"conf\", function() { return conf; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"language\", function() { return language; });\n/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/var conf={comments:{lineComment:'#',blockComment:['=begin','=end']},brackets:[['(',')'],['{','}'],['[',']']],autoClosingPairs:[{open:'{',close:'}'},{open:'[',close:']'},{open:'(',close:')'},{open:'\"',close:'\"'},{open:'\\'',close:'\\''}],surroundingPairs:[{open:'{',close:'}'},{open:'[',close:']'},{open:'(',close:')'},{open:'\"',close:'\"'},{open:'\\'',close:'\\''}],indentationRules:{increaseIndentPattern:new RegExp('^\\\\s*((begin|class|(private|protected)\\\\s+def|def|else|elsif|ensure|for|if|module|rescue|unless|until|when|while|case)|([^#]*\\\\sdo\\\\b)|([^#]*=\\\\s*(case|if|unless)))\\\\b([^#\\\\{;]|(\"|\\'|\\/).*\\\\4)*(#.*)?$'),decreaseIndentPattern:new RegExp('^\\\\s*([}\\\\]]([,)]?\\\\s*(#|$)|\\\\.[a-zA-Z_]\\\\w*\\\\b)|(end|rescue|ensure|else|elsif|when)\\\\b)')}};/*\r\n * Ruby language definition\r\n *\r\n * Quite a complex language due to elaborate escape sequences\r\n * and quoting of literate strings/regular expressions, and\r\n * an 'end' keyword that does not always apply to modifiers like until and while,\r\n * and a 'do' keyword that sometimes starts a block, but sometimes is part of\r\n * another statement (like 'while').\r\n *\r\n * (1) end blocks:\r\n * 'end' may end declarations like if or until, but sometimes 'if' or 'until'\r\n * are modifiers where there is no 'end'. Also, 'do' sometimes starts a block\r\n * that is ended by 'end', but sometimes it is part of a 'while', 'for', or 'until'\r\n * To do proper brace matching we do some elaborate state manipulation.\r\n * some examples:\r\n *\r\n *   until bla do\r\n *     work until tired\r\n *     list.each do\r\n *       something if test\r\n *     end\r\n *   end\r\n *\r\n * or\r\n *\r\n * if test\r\n *  something (if test then x end)\r\n *  bar if bla\r\n * end\r\n *\r\n * or, how about using class as a property..\r\n *\r\n * class Test\r\n *   def endpoint\r\n *     self.class.endpoint || routes\r\n *   end\r\n * end\r\n *\r\n * (2) quoting:\r\n * there are many kinds of strings and escape sequences. But also, one can\r\n * start many string-like things as '%qx' where q specifies the kind of string\r\n * (like a command, escape expanded, regular expression, symbol etc.), and x is\r\n * some character and only another 'x' ends the sequence. Except for brackets\r\n * where the closing bracket ends the sequence.. and except for a nested bracket\r\n * inside the string like entity. Also, such strings can contain interpolated\r\n * ruby expressions again (and span multiple lines). Moreover, expanded\r\n * regular expression can also contain comments.\r\n */var language={tokenPostfix:'.ruby',keywords:['__LINE__','__ENCODING__','__FILE__','BEGIN','END','alias','and','begin','break','case','class','def','defined?','do','else','elsif','end','ensure','for','false','if','in','module','next','nil','not','or','redo','rescue','retry','return','self','super','then','true','undef','unless','until','when','while','yield'],keywordops:['::','..','...','?',':','=>'],builtins:['require','public','private','include','extend','attr_reader','protected','private_class_method','protected_class_method','new'],// these are closed by 'end' (if, while and until are handled separately)\ndeclarations:['module','class','def','case','do','begin','for','if','while','until','unless'],linedecls:['def','case','do','begin','for','if','while','until','unless'],operators:['^','&','|','<=>','==','===','!~','=~','>','>=','<','<=','<<','>>','+','-','*','/','%','**','~','+@','-@','[]','[]=','`','+=','-=','*=','**=','/=','^=','%=','<<=','>>=','&=','&&=','||=','|='],brackets:[{open:'(',close:')',token:'delimiter.parenthesis'},{open:'{',close:'}',token:'delimiter.curly'},{open:'[',close:']',token:'delimiter.square'}],// we include these common regular expressions\nsymbols:/[=><!~?:&|+\\-*\\/\\^%\\.]+/,// escape sequences\nescape:/(?:[abefnrstv\\\\\"'\\n\\r]|[0-7]{1,3}|x[0-9A-Fa-f]{1,2}|u[0-9A-Fa-f]{4})/,escapes:/\\\\(?:C\\-(@escape|.)|c(@escape|.)|@escape)/,decpart:/\\d(_?\\d)*/,decimal:/0|@decpart/,delim:/[^a-zA-Z0-9\\s\\n\\r]/,heredelim:/(?:\\w+|'[^']*'|\"[^\"]*\"|`[^`]*`)/,regexpctl:/[(){}\\[\\]\\$\\^|\\-*+?\\.]/,regexpesc:/\\\\(?:[AzZbBdDfnrstvwWn0\\\\\\/]|@regexpctl|c[A-Z]|x[0-9a-fA-F]{2}|u[0-9a-fA-F]{4})?/,// The main tokenizer for our languages\ntokenizer:{// Main entry.\n// root.<decl> where decl is the current opening declaration (like 'class')\nroot:[// identifiers and keywords\n// most complexity here is due to matching 'end' correctly with declarations.\n// We distinguish a declaration that comes first on a line, versus declarations further on a line (which are most likey modifiers)\n[/^(\\s*)([a-z_]\\w*[!?=]?)/,['white',{cases:{'for|until|while':{token:'keyword.$2',next:'@dodecl.$2'},'@declarations':{token:'keyword.$2',next:'@root.$2'},'end':{token:'keyword.$S2',next:'@pop'},'@keywords':'keyword','@builtins':'predefined','@default':'identifier'}}]],[/[a-z_]\\w*[!?=]?/,{cases:{'if|unless|while|until':{token:'keyword.$0x',next:'@modifier.$0x'},'for':{token:'keyword.$2',next:'@dodecl.$2'},'@linedecls':{token:'keyword.$0',next:'@root.$0'},'end':{token:'keyword.$S2',next:'@pop'},'@keywords':'keyword','@builtins':'predefined','@default':'identifier'}}],[/[A-Z][\\w]*[!?=]?/,'constructor.identifier'],[/\\$[\\w]*/,'global.constant'],[/@[\\w]*/,'namespace.instance.identifier'],[/@@[\\w]*/,'namespace.class.identifier'],// here document\n[/<<[-~](@heredelim).*/,{token:'string.heredoc.delimiter',next:'@heredoc.$1'}],[/[ \\t\\r\\n]+<<(@heredelim).*/,{token:'string.heredoc.delimiter',next:'@heredoc.$1'}],[/^<<(@heredelim).*/,{token:'string.heredoc.delimiter',next:'@heredoc.$1'}],// whitespace\n{include:'@whitespace'},// strings\n[/\"/,{token:'string.d.delim',next:'@dstring.d.\"'}],[/'/,{token:'string.sq.delim',next:'@sstring.sq'}],// % literals. For efficiency, rematch in the 'pstring' state\n[/%([rsqxwW]|Q?)/,{token:'@rematch',next:'pstring'}],// commands and symbols\n[/`/,{token:'string.x.delim',next:'@dstring.x.`'}],[/:(\\w|[$@])\\w*[!?=]?/,'string.s'],[/:\"/,{token:'string.s.delim',next:'@dstring.s.\"'}],[/:'/,{token:'string.s.delim',next:'@sstring.s'}],// regular expressions. Lookahead for a (not escaped) closing forwardslash on the same line\n[/\\/(?=(\\\\\\/|[^\\/\\n])+\\/)/,{token:'regexp.delim',next:'@regexp'}],// delimiters and operators\n[/[{}()\\[\\]]/,'@brackets'],[/@symbols/,{cases:{'@keywordops':'keyword','@operators':'operator','@default':''}}],[/[;,]/,'delimiter'],// numbers\n[/0[xX][0-9a-fA-F](_?[0-9a-fA-F])*/,'number.hex'],[/0[_oO][0-7](_?[0-7])*/,'number.octal'],[/0[bB][01](_?[01])*/,'number.binary'],[/0[dD]@decpart/,'number'],[/@decimal((\\.@decpart)?([eE][\\-+]?@decpart)?)/,{cases:{'$1':'number.float','@default':'number'}}]],// used to not treat a 'do' as a block opener if it occurs on the same\n// line as a 'do' statement: 'while|until|for'\n// dodecl.<decl> where decl is the declarations started, like 'while'\ndodecl:[[/^/,{token:'',switchTo:'@root.$S2'}],[/[a-z_]\\w*[!?=]?/,{cases:{'end':{token:'keyword.$S2',next:'@pop'},'do':{token:'keyword',switchTo:'@root.$S2'},'@linedecls':{token:'@rematch',switchTo:'@root.$S2'},'@keywords':'keyword','@builtins':'predefined','@default':'identifier'}}],{include:'@root'}],// used to prevent potential modifiers ('if|until|while|unless') to match\n// with 'end' keywords.\n// modifier.<decl>x where decl is the declaration starter, like 'if'\nmodifier:[[/^/,'','@pop'],[/[a-z_]\\w*[!?=]?/,{cases:{'end':{token:'keyword.$S2',next:'@pop'},'then|else|elsif|do':{token:'keyword',switchTo:'@root.$S2'},'@linedecls':{token:'@rematch',switchTo:'@root.$S2'},'@keywords':'keyword','@builtins':'predefined','@default':'identifier'}}],{include:'@root'}],// single quote strings (also used for symbols)\n// sstring.<kind>  where kind is 'sq' (single quote) or 's' (symbol)\nsstring:[[/[^\\\\']+/,'string.$S2'],[/\\\\\\\\|\\\\'|\\\\$/,'string.$S2.escape'],[/\\\\./,'string.$S2.invalid'],[/'/,{token:'string.$S2.delim',next:'@pop'}]],// double quoted \"string\".\n// dstring.<kind>.<delim> where kind is 'd' (double quoted), 'x' (command), or 's' (symbol)\n// and delim is the ending delimiter (\" or `)\ndstring:[[/[^\\\\`\"#]+/,'string.$S2'],[/#/,'string.$S2.escape','@interpolated'],[/\\\\$/,'string.$S2.escape'],[/@escapes/,'string.$S2.escape'],[/\\\\./,'string.$S2.escape.invalid'],[/[`\"]/,{cases:{'$#==$S3':{token:'string.$S2.delim',next:'@pop'},'@default':'string.$S2'}}]],// literal documents\n// heredoc.<close> where close is the closing delimiter\nheredoc:[[/^(\\s*)(@heredelim)$/,{cases:{'$2==$S2':['string.heredoc',{token:'string.heredoc.delimiter',next:'@pop'}],'@default':['string.heredoc','string.heredoc']}}],[/.*/,'string.heredoc']],// interpolated sequence\ninterpolated:[[/\\$\\w*/,'global.constant','@pop'],[/@\\w*/,'namespace.class.identifier','@pop'],[/@@\\w*/,'namespace.instance.identifier','@pop'],[/[{]/,{token:'string.escape.curly',switchTo:'@interpolated_compound'}],['','','@pop']],// any code\ninterpolated_compound:[[/[}]/,{token:'string.escape.curly',next:'@pop'}],{include:'@root'}],// %r quoted regexp\n// pregexp.<open>.<close> where open/close are the open/close delimiter\npregexp:[{include:'@whitespace'},// turns out that you can quote using regex control characters, aargh!\n// for example; %r|kgjgaj| is ok (even though | is used for alternation)\n// so, we need to match those first\n[/[^\\(\\{\\[\\\\]/,{cases:{'$#==$S3':{token:'regexp.delim',next:'@pop'},'$#==$S2':{token:'regexp.delim',next:'@push'},'~[)}\\\\]]':'@brackets.regexp.escape.control','~@regexpctl':'regexp.escape.control','@default':'regexp'}}],{include:'@regexcontrol'}],// We match regular expression quite precisely\nregexp:[{include:'@regexcontrol'},[/[^\\\\\\/]/,'regexp'],['/[ixmp]*',{token:'regexp.delim'},'@pop']],regexcontrol:[[/(\\{)(\\d+(?:,\\d*)?)(\\})/,['@brackets.regexp.escape.control','regexp.escape.control','@brackets.regexp.escape.control']],[/(\\[)(\\^?)/,['@brackets.regexp.escape.control',{token:'regexp.escape.control',next:'@regexrange'}]],[/(\\()(\\?[:=!])/,['@brackets.regexp.escape.control','regexp.escape.control']],[/\\(\\?#/,{token:'regexp.escape.control',next:'@regexpcomment'}],[/[()]/,'@brackets.regexp.escape.control'],[/@regexpctl/,'regexp.escape.control'],[/\\\\$/,'regexp.escape'],[/@regexpesc/,'regexp.escape'],[/\\\\\\./,'regexp.invalid'],[/#/,'regexp.escape','@interpolated']],regexrange:[[/-/,'regexp.escape.control'],[/\\^/,'regexp.invalid'],[/\\\\$/,'regexp.escape'],[/@regexpesc/,'regexp.escape'],[/[^\\]]/,'regexp'],[/\\]/,'@brackets.regexp.escape.control','@pop']],regexpcomment:[[/[^)]+/,'comment'],[/\\)/,{token:'regexp.escape.control',next:'@pop'}]],// % quoted strings\n// A bit repetitive since we need to often special case the kind of ending delimiter\npstring:[[/%([qws])\\(/,{token:'string.$1.delim',switchTo:'@qstring.$1.(.)'}],[/%([qws])\\[/,{token:'string.$1.delim',switchTo:'@qstring.$1.[.]'}],[/%([qws])\\{/,{token:'string.$1.delim',switchTo:'@qstring.$1.{.}'}],[/%([qws])</,{token:'string.$1.delim',switchTo:'@qstring.$1.<.>'}],[/%([qws])(@delim)/,{token:'string.$1.delim',switchTo:'@qstring.$1.$2.$2'}],[/%r\\(/,{token:'regexp.delim',switchTo:'@pregexp.(.)'}],[/%r\\[/,{token:'regexp.delim',switchTo:'@pregexp.[.]'}],[/%r\\{/,{token:'regexp.delim',switchTo:'@pregexp.{.}'}],[/%r</,{token:'regexp.delim',switchTo:'@pregexp.<.>'}],[/%r(@delim)/,{token:'regexp.delim',switchTo:'@pregexp.$1.$1'}],[/%(x|W|Q?)\\(/,{token:'string.$1.delim',switchTo:'@qqstring.$1.(.)'}],[/%(x|W|Q?)\\[/,{token:'string.$1.delim',switchTo:'@qqstring.$1.[.]'}],[/%(x|W|Q?)\\{/,{token:'string.$1.delim',switchTo:'@qqstring.$1.{.}'}],[/%(x|W|Q?)</,{token:'string.$1.delim',switchTo:'@qqstring.$1.<.>'}],[/%(x|W|Q?)(@delim)/,{token:'string.$1.delim',switchTo:'@qqstring.$1.$2.$2'}],[/%([rqwsxW]|Q?)./,{token:'invalid',next:'@pop'}],[/./,{token:'invalid',next:'@pop'}]],// non-expanded quoted string.\n// qstring.<kind>.<open>.<close>\n//  kind = q|w|s  (single quote, array, symbol)\n//  open = open delimiter\n//  close = close delimiter\nqstring:[[/\\\\$/,'string.$S2.escape'],[/\\\\./,'string.$S2.escape'],[/./,{cases:{'$#==$S4':{token:'string.$S2.delim',next:'@pop'},'$#==$S3':{token:'string.$S2.delim',next:'@push'},'@default':'string.$S2'}}]],// expanded quoted string.\n// qqstring.<kind>.<open>.<close>\n//  kind = Q|W|x  (double quote, array, command)\n//  open = open delimiter\n//  close = close delimiter\nqqstring:[[/#/,'string.$S2.escape','@interpolated'],{include:'@qstring'}],// whitespace & comments\nwhitespace:[[/[ \\t\\r\\n]+/,''],[/^\\s*=begin\\b/,'comment','@comment'],[/#.*$/,'comment']],comment:[[/[^=]+/,'comment'],[/^\\s*=begin\\b/,'comment.invalid'],[/^\\s*=end\\b.*/,'comment','@pop'],[/[=]/,'comment']]}};\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// static/js/22.f6f17a6b.chunk.js","/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\n'use strict';\r\nexport var conf = {\r\n    comments: {\r\n        lineComment: '#',\r\n        blockComment: ['=begin', '=end'],\r\n    },\r\n    brackets: [\r\n        ['(', ')'],\r\n        ['{', '}'],\r\n        ['[', ']']\r\n    ],\r\n    autoClosingPairs: [\r\n        { open: '{', close: '}' },\r\n        { open: '[', close: ']' },\r\n        { open: '(', close: ')' },\r\n        { open: '\"', close: '\"' },\r\n        { open: '\\'', close: '\\'' },\r\n    ],\r\n    surroundingPairs: [\r\n        { open: '{', close: '}' },\r\n        { open: '[', close: ']' },\r\n        { open: '(', close: ')' },\r\n        { open: '\"', close: '\"' },\r\n        { open: '\\'', close: '\\'' },\r\n    ],\r\n    indentationRules: {\r\n        increaseIndentPattern: new RegExp('^\\\\s*((begin|class|(private|protected)\\\\s+def|def|else|elsif|ensure|for|if|module|rescue|unless|until|when|while|case)|([^#]*\\\\sdo\\\\b)|([^#]*=\\\\s*(case|if|unless)))\\\\b([^#\\\\{;]|(\"|\\'|\\/).*\\\\4)*(#.*)?$'),\r\n        decreaseIndentPattern: new RegExp('^\\\\s*([}\\\\]]([,)]?\\\\s*(#|$)|\\\\.[a-zA-Z_]\\\\w*\\\\b)|(end|rescue|ensure|else|elsif|when)\\\\b)'),\r\n    }\r\n};\r\n/*\r\n * Ruby language definition\r\n *\r\n * Quite a complex language due to elaborate escape sequences\r\n * and quoting of literate strings/regular expressions, and\r\n * an 'end' keyword that does not always apply to modifiers like until and while,\r\n * and a 'do' keyword that sometimes starts a block, but sometimes is part of\r\n * another statement (like 'while').\r\n *\r\n * (1) end blocks:\r\n * 'end' may end declarations like if or until, but sometimes 'if' or 'until'\r\n * are modifiers where there is no 'end'. Also, 'do' sometimes starts a block\r\n * that is ended by 'end', but sometimes it is part of a 'while', 'for', or 'until'\r\n * To do proper brace matching we do some elaborate state manipulation.\r\n * some examples:\r\n *\r\n *   until bla do\r\n *     work until tired\r\n *     list.each do\r\n *       something if test\r\n *     end\r\n *   end\r\n *\r\n * or\r\n *\r\n * if test\r\n *  something (if test then x end)\r\n *  bar if bla\r\n * end\r\n *\r\n * or, how about using class as a property..\r\n *\r\n * class Test\r\n *   def endpoint\r\n *     self.class.endpoint || routes\r\n *   end\r\n * end\r\n *\r\n * (2) quoting:\r\n * there are many kinds of strings and escape sequences. But also, one can\r\n * start many string-like things as '%qx' where q specifies the kind of string\r\n * (like a command, escape expanded, regular expression, symbol etc.), and x is\r\n * some character and only another 'x' ends the sequence. Except for brackets\r\n * where the closing bracket ends the sequence.. and except for a nested bracket\r\n * inside the string like entity. Also, such strings can contain interpolated\r\n * ruby expressions again (and span multiple lines). Moreover, expanded\r\n * regular expression can also contain comments.\r\n */\r\nexport var language = {\r\n    tokenPostfix: '.ruby',\r\n    keywords: [\r\n        '__LINE__', '__ENCODING__', '__FILE__', 'BEGIN', 'END', 'alias', 'and', 'begin',\r\n        'break', 'case', 'class', 'def', 'defined?', 'do', 'else', 'elsif', 'end',\r\n        'ensure', 'for', 'false', 'if', 'in', 'module', 'next', 'nil', 'not', 'or', 'redo',\r\n        'rescue', 'retry', 'return', 'self', 'super', 'then', 'true', 'undef', 'unless',\r\n        'until', 'when', 'while', 'yield',\r\n    ],\r\n    keywordops: [\r\n        '::', '..', '...', '?', ':', '=>'\r\n    ],\r\n    builtins: [\r\n        'require', 'public', 'private', 'include', 'extend', 'attr_reader',\r\n        'protected', 'private_class_method', 'protected_class_method', 'new'\r\n    ],\r\n    // these are closed by 'end' (if, while and until are handled separately)\r\n    declarations: [\r\n        'module', 'class', 'def', 'case', 'do', 'begin', 'for', 'if', 'while', 'until', 'unless'\r\n    ],\r\n    linedecls: [\r\n        'def', 'case', 'do', 'begin', 'for', 'if', 'while', 'until', 'unless'\r\n    ],\r\n    operators: [\r\n        '^', '&', '|', '<=>', '==', '===', '!~', '=~', '>', '>=', '<', '<=', '<<', '>>', '+',\r\n        '-', '*', '/', '%', '**', '~', '+@', '-@', '[]', '[]=', '`',\r\n        '+=', '-=', '*=', '**=', '/=', '^=', '%=', '<<=', '>>=', '&=', '&&=', '||=', '|='\r\n    ],\r\n    brackets: [\r\n        { open: '(', close: ')', token: 'delimiter.parenthesis' },\r\n        { open: '{', close: '}', token: 'delimiter.curly' },\r\n        { open: '[', close: ']', token: 'delimiter.square' }\r\n    ],\r\n    // we include these common regular expressions\r\n    symbols: /[=><!~?:&|+\\-*\\/\\^%\\.]+/,\r\n    // escape sequences\r\n    escape: /(?:[abefnrstv\\\\\"'\\n\\r]|[0-7]{1,3}|x[0-9A-Fa-f]{1,2}|u[0-9A-Fa-f]{4})/,\r\n    escapes: /\\\\(?:C\\-(@escape|.)|c(@escape|.)|@escape)/,\r\n    decpart: /\\d(_?\\d)*/,\r\n    decimal: /0|@decpart/,\r\n    delim: /[^a-zA-Z0-9\\s\\n\\r]/,\r\n    heredelim: /(?:\\w+|'[^']*'|\"[^\"]*\"|`[^`]*`)/,\r\n    regexpctl: /[(){}\\[\\]\\$\\^|\\-*+?\\.]/,\r\n    regexpesc: /\\\\(?:[AzZbBdDfnrstvwWn0\\\\\\/]|@regexpctl|c[A-Z]|x[0-9a-fA-F]{2}|u[0-9a-fA-F]{4})?/,\r\n    // The main tokenizer for our languages\r\n    tokenizer: {\r\n        // Main entry.\r\n        // root.<decl> where decl is the current opening declaration (like 'class')\r\n        root: [\r\n            // identifiers and keywords\r\n            // most complexity here is due to matching 'end' correctly with declarations.\r\n            // We distinguish a declaration that comes first on a line, versus declarations further on a line (which are most likey modifiers)\r\n            [/^(\\s*)([a-z_]\\w*[!?=]?)/, ['white',\r\n                    {\r\n                        cases: {\r\n                            'for|until|while': { token: 'keyword.$2', next: '@dodecl.$2' },\r\n                            '@declarations': { token: 'keyword.$2', next: '@root.$2' },\r\n                            'end': { token: 'keyword.$S2', next: '@pop' },\r\n                            '@keywords': 'keyword',\r\n                            '@builtins': 'predefined',\r\n                            '@default': 'identifier'\r\n                        }\r\n                    }]],\r\n            [/[a-z_]\\w*[!?=]?/,\r\n                {\r\n                    cases: {\r\n                        'if|unless|while|until': { token: 'keyword.$0x', next: '@modifier.$0x' },\r\n                        'for': { token: 'keyword.$2', next: '@dodecl.$2' },\r\n                        '@linedecls': { token: 'keyword.$0', next: '@root.$0' },\r\n                        'end': { token: 'keyword.$S2', next: '@pop' },\r\n                        '@keywords': 'keyword',\r\n                        '@builtins': 'predefined',\r\n                        '@default': 'identifier'\r\n                    }\r\n                }],\r\n            [/[A-Z][\\w]*[!?=]?/, 'constructor.identifier'],\r\n            [/\\$[\\w]*/, 'global.constant'],\r\n            [/@[\\w]*/, 'namespace.instance.identifier'],\r\n            [/@@[\\w]*/, 'namespace.class.identifier'],\r\n            // here document\r\n            [/<<[-~](@heredelim).*/, { token: 'string.heredoc.delimiter', next: '@heredoc.$1' }],\r\n            [/[ \\t\\r\\n]+<<(@heredelim).*/, { token: 'string.heredoc.delimiter', next: '@heredoc.$1' }],\r\n            [/^<<(@heredelim).*/, { token: 'string.heredoc.delimiter', next: '@heredoc.$1' }],\r\n            // whitespace\r\n            { include: '@whitespace' },\r\n            // strings\r\n            [/\"/, { token: 'string.d.delim', next: '@dstring.d.\"' }],\r\n            [/'/, { token: 'string.sq.delim', next: '@sstring.sq' }],\r\n            // % literals. For efficiency, rematch in the 'pstring' state\r\n            [/%([rsqxwW]|Q?)/, { token: '@rematch', next: 'pstring' }],\r\n            // commands and symbols\r\n            [/`/, { token: 'string.x.delim', next: '@dstring.x.`' }],\r\n            [/:(\\w|[$@])\\w*[!?=]?/, 'string.s'],\r\n            [/:\"/, { token: 'string.s.delim', next: '@dstring.s.\"' }],\r\n            [/:'/, { token: 'string.s.delim', next: '@sstring.s' }],\r\n            // regular expressions. Lookahead for a (not escaped) closing forwardslash on the same line\r\n            [/\\/(?=(\\\\\\/|[^\\/\\n])+\\/)/, { token: 'regexp.delim', next: '@regexp' }],\r\n            // delimiters and operators\r\n            [/[{}()\\[\\]]/, '@brackets'],\r\n            [/@symbols/, {\r\n                    cases: {\r\n                        '@keywordops': 'keyword',\r\n                        '@operators': 'operator',\r\n                        '@default': ''\r\n                    }\r\n                }],\r\n            [/[;,]/, 'delimiter'],\r\n            // numbers\r\n            [/0[xX][0-9a-fA-F](_?[0-9a-fA-F])*/, 'number.hex'],\r\n            [/0[_oO][0-7](_?[0-7])*/, 'number.octal'],\r\n            [/0[bB][01](_?[01])*/, 'number.binary'],\r\n            [/0[dD]@decpart/, 'number'],\r\n            [/@decimal((\\.@decpart)?([eE][\\-+]?@decpart)?)/, {\r\n                    cases: {\r\n                        '$1': 'number.float',\r\n                        '@default': 'number'\r\n                    }\r\n                }],\r\n        ],\r\n        // used to not treat a 'do' as a block opener if it occurs on the same\r\n        // line as a 'do' statement: 'while|until|for'\r\n        // dodecl.<decl> where decl is the declarations started, like 'while'\r\n        dodecl: [\r\n            [/^/, { token: '', switchTo: '@root.$S2' }],\r\n            [/[a-z_]\\w*[!?=]?/, {\r\n                    cases: {\r\n                        'end': { token: 'keyword.$S2', next: '@pop' },\r\n                        'do': { token: 'keyword', switchTo: '@root.$S2' },\r\n                        '@linedecls': { token: '@rematch', switchTo: '@root.$S2' },\r\n                        '@keywords': 'keyword',\r\n                        '@builtins': 'predefined',\r\n                        '@default': 'identifier'\r\n                    }\r\n                }],\r\n            { include: '@root' }\r\n        ],\r\n        // used to prevent potential modifiers ('if|until|while|unless') to match\r\n        // with 'end' keywords.\r\n        // modifier.<decl>x where decl is the declaration starter, like 'if'\r\n        modifier: [\r\n            [/^/, '', '@pop'],\r\n            [/[a-z_]\\w*[!?=]?/, {\r\n                    cases: {\r\n                        'end': { token: 'keyword.$S2', next: '@pop' },\r\n                        'then|else|elsif|do': { token: 'keyword', switchTo: '@root.$S2' },\r\n                        '@linedecls': { token: '@rematch', switchTo: '@root.$S2' },\r\n                        '@keywords': 'keyword',\r\n                        '@builtins': 'predefined',\r\n                        '@default': 'identifier'\r\n                    }\r\n                }],\r\n            { include: '@root' }\r\n        ],\r\n        // single quote strings (also used for symbols)\r\n        // sstring.<kind>  where kind is 'sq' (single quote) or 's' (symbol)\r\n        sstring: [\r\n            [/[^\\\\']+/, 'string.$S2'],\r\n            [/\\\\\\\\|\\\\'|\\\\$/, 'string.$S2.escape'],\r\n            [/\\\\./, 'string.$S2.invalid'],\r\n            [/'/, { token: 'string.$S2.delim', next: '@pop' }]\r\n        ],\r\n        // double quoted \"string\".\r\n        // dstring.<kind>.<delim> where kind is 'd' (double quoted), 'x' (command), or 's' (symbol)\r\n        // and delim is the ending delimiter (\" or `)\r\n        dstring: [\r\n            [/[^\\\\`\"#]+/, 'string.$S2'],\r\n            [/#/, 'string.$S2.escape', '@interpolated'],\r\n            [/\\\\$/, 'string.$S2.escape'],\r\n            [/@escapes/, 'string.$S2.escape'],\r\n            [/\\\\./, 'string.$S2.escape.invalid'],\r\n            [/[`\"]/, {\r\n                    cases: {\r\n                        '$#==$S3': { token: 'string.$S2.delim', next: '@pop' },\r\n                        '@default': 'string.$S2'\r\n                    }\r\n                }]\r\n        ],\r\n        // literal documents\r\n        // heredoc.<close> where close is the closing delimiter\r\n        heredoc: [\r\n            [/^(\\s*)(@heredelim)$/, {\r\n                    cases: {\r\n                        '$2==$S2': ['string.heredoc', { token: 'string.heredoc.delimiter', next: '@pop' }],\r\n                        '@default': ['string.heredoc', 'string.heredoc']\r\n                    }\r\n                }],\r\n            [/.*/, 'string.heredoc'],\r\n        ],\r\n        // interpolated sequence\r\n        interpolated: [\r\n            [/\\$\\w*/, 'global.constant', '@pop'],\r\n            [/@\\w*/, 'namespace.class.identifier', '@pop'],\r\n            [/@@\\w*/, 'namespace.instance.identifier', '@pop'],\r\n            [/[{]/, { token: 'string.escape.curly', switchTo: '@interpolated_compound' }],\r\n            ['', '', '@pop'],\r\n        ],\r\n        // any code\r\n        interpolated_compound: [\r\n            [/[}]/, { token: 'string.escape.curly', next: '@pop' }],\r\n            { include: '@root' },\r\n        ],\r\n        // %r quoted regexp\r\n        // pregexp.<open>.<close> where open/close are the open/close delimiter\r\n        pregexp: [\r\n            { include: '@whitespace' },\r\n            // turns out that you can quote using regex control characters, aargh!\r\n            // for example; %r|kgjgaj| is ok (even though | is used for alternation)\r\n            // so, we need to match those first\r\n            [/[^\\(\\{\\[\\\\]/, {\r\n                    cases: {\r\n                        '$#==$S3': { token: 'regexp.delim', next: '@pop' },\r\n                        '$#==$S2': { token: 'regexp.delim', next: '@push' },\r\n                        '~[)}\\\\]]': '@brackets.regexp.escape.control',\r\n                        '~@regexpctl': 'regexp.escape.control',\r\n                        '@default': 'regexp'\r\n                    }\r\n                }],\r\n            { include: '@regexcontrol' },\r\n        ],\r\n        // We match regular expression quite precisely\r\n        regexp: [\r\n            { include: '@regexcontrol' },\r\n            [/[^\\\\\\/]/, 'regexp'],\r\n            ['/[ixmp]*', { token: 'regexp.delim' }, '@pop'],\r\n        ],\r\n        regexcontrol: [\r\n            [/(\\{)(\\d+(?:,\\d*)?)(\\})/, ['@brackets.regexp.escape.control', 'regexp.escape.control', '@brackets.regexp.escape.control']],\r\n            [/(\\[)(\\^?)/, ['@brackets.regexp.escape.control', { token: 'regexp.escape.control', next: '@regexrange' }]],\r\n            [/(\\()(\\?[:=!])/, ['@brackets.regexp.escape.control', 'regexp.escape.control']],\r\n            [/\\(\\?#/, { token: 'regexp.escape.control', next: '@regexpcomment' }],\r\n            [/[()]/, '@brackets.regexp.escape.control'],\r\n            [/@regexpctl/, 'regexp.escape.control'],\r\n            [/\\\\$/, 'regexp.escape'],\r\n            [/@regexpesc/, 'regexp.escape'],\r\n            [/\\\\\\./, 'regexp.invalid'],\r\n            [/#/, 'regexp.escape', '@interpolated'],\r\n        ],\r\n        regexrange: [\r\n            [/-/, 'regexp.escape.control'],\r\n            [/\\^/, 'regexp.invalid'],\r\n            [/\\\\$/, 'regexp.escape'],\r\n            [/@regexpesc/, 'regexp.escape'],\r\n            [/[^\\]]/, 'regexp'],\r\n            [/\\]/, '@brackets.regexp.escape.control', '@pop'],\r\n        ],\r\n        regexpcomment: [\r\n            [/[^)]+/, 'comment'],\r\n            [/\\)/, { token: 'regexp.escape.control', next: '@pop' }]\r\n        ],\r\n        // % quoted strings\r\n        // A bit repetitive since we need to often special case the kind of ending delimiter\r\n        pstring: [\r\n            [/%([qws])\\(/, { token: 'string.$1.delim', switchTo: '@qstring.$1.(.)' }],\r\n            [/%([qws])\\[/, { token: 'string.$1.delim', switchTo: '@qstring.$1.[.]' }],\r\n            [/%([qws])\\{/, { token: 'string.$1.delim', switchTo: '@qstring.$1.{.}' }],\r\n            [/%([qws])</, { token: 'string.$1.delim', switchTo: '@qstring.$1.<.>' }],\r\n            [/%([qws])(@delim)/, { token: 'string.$1.delim', switchTo: '@qstring.$1.$2.$2' }],\r\n            [/%r\\(/, { token: 'regexp.delim', switchTo: '@pregexp.(.)' }],\r\n            [/%r\\[/, { token: 'regexp.delim', switchTo: '@pregexp.[.]' }],\r\n            [/%r\\{/, { token: 'regexp.delim', switchTo: '@pregexp.{.}' }],\r\n            [/%r</, { token: 'regexp.delim', switchTo: '@pregexp.<.>' }],\r\n            [/%r(@delim)/, { token: 'regexp.delim', switchTo: '@pregexp.$1.$1' }],\r\n            [/%(x|W|Q?)\\(/, { token: 'string.$1.delim', switchTo: '@qqstring.$1.(.)' }],\r\n            [/%(x|W|Q?)\\[/, { token: 'string.$1.delim', switchTo: '@qqstring.$1.[.]' }],\r\n            [/%(x|W|Q?)\\{/, { token: 'string.$1.delim', switchTo: '@qqstring.$1.{.}' }],\r\n            [/%(x|W|Q?)</, { token: 'string.$1.delim', switchTo: '@qqstring.$1.<.>' }],\r\n            [/%(x|W|Q?)(@delim)/, { token: 'string.$1.delim', switchTo: '@qqstring.$1.$2.$2' }],\r\n            [/%([rqwsxW]|Q?)./, { token: 'invalid', next: '@pop' }],\r\n            [/./, { token: 'invalid', next: '@pop' }],\r\n        ],\r\n        // non-expanded quoted string.\r\n        // qstring.<kind>.<open>.<close>\r\n        //  kind = q|w|s  (single quote, array, symbol)\r\n        //  open = open delimiter\r\n        //  close = close delimiter\r\n        qstring: [\r\n            [/\\\\$/, 'string.$S2.escape'],\r\n            [/\\\\./, 'string.$S2.escape'],\r\n            [/./, {\r\n                    cases: {\r\n                        '$#==$S4': { token: 'string.$S2.delim', next: '@pop' },\r\n                        '$#==$S3': { token: 'string.$S2.delim', next: '@push' },\r\n                        '@default': 'string.$S2'\r\n                    }\r\n                }],\r\n        ],\r\n        // expanded quoted string.\r\n        // qqstring.<kind>.<open>.<close>\r\n        //  kind = Q|W|x  (double quote, array, command)\r\n        //  open = open delimiter\r\n        //  close = close delimiter\r\n        qqstring: [\r\n            [/#/, 'string.$S2.escape', '@interpolated'],\r\n            { include: '@qstring' }\r\n        ],\r\n        // whitespace & comments\r\n        whitespace: [\r\n            [/[ \\t\\r\\n]+/, ''],\r\n            [/^\\s*=begin\\b/, 'comment', '@comment'],\r\n            [/#.*$/, 'comment'],\r\n        ],\r\n        comment: [\r\n            [/[^=]+/, 'comment'],\r\n            [/^\\s*=begin\\b/, 'comment.invalid'],\r\n            [/^\\s*=end\\b.*/, 'comment', '@pop'],\r\n            [/[=]/, 'comment']\r\n        ],\r\n    }\r\n};\r\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/monaco-editor/esm/vs/basic-languages/ruby/ruby.js"],"sourceRoot":""}