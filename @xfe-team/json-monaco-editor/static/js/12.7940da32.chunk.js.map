{"version":3,"sources":["../static/js/12.7940da32.chunk.js","../node_modules/monaco-editor/esm/vs/basic-languages/swift/swift.js"],"names":["webpackJsonp","1369","module","__webpack_exports__","__webpack_require__","conf","comments","lineComment","blockComment","brackets","autoClosingPairs","open","close","surroundingPairs","language","defaultToken","tokenPostfix","identifier","attributes","accessmodifiers","keywords","symbols","operatorstart","operatorend","operators","escapes","tokenizer","root","include","whitespace","endDblDocString","symbol","comment","commentdocbody","commentbody","attribute","cases","literal","token","next","stringlit","interpolatedexpression","keyword","escapedkeyword","invokedmethod"],"mappings":"AAAAA,cAAc,KAERC,KACA,SAAUC,EAAQC,EAAqBC,GAE7C,YCLA,2HAIO,IAAIC,IACPC,UACIC,YAAa,KACbC,cAAe,KAAM,OAEzBC,WACK,IAAK,MACL,IAAK,MACL,IAAK,MAEVC,mBACMC,KAAM,IAAKC,MAAO,MAClBD,KAAM,IAAKC,MAAO,MAClBD,KAAM,IAAKC,MAAO,MAClBD,KAAM,IAAKC,MAAO,MAClBD,KAAM,IAAMC,MAAO,MACnBD,KAAM,IAAKC,MAAO,MAExBC,mBACMF,KAAM,IAAKC,MAAO,MAClBD,KAAM,IAAKC,MAAO,MAClBD,KAAM,IAAKC,MAAO,MAClBD,KAAM,IAAKC,MAAO,MAClBD,KAAM,IAAMC,MAAO,MACnBD,KAAM,IAAKC,MAAO,OAGjBE,GACPC,aAAc,GACdC,aAAc,SAEdC,WAAY,kBAEZC,YACI,eAAgB,YAAa,YAAa,qBAAsB,aAAc,aAC9E,QAAS,qBAAsB,YAAa,gBAAiB,YAAa,gBAAiB,iBAAkB,aAEjHC,iBAAkB,SAAU,UAAW,YACvCC,UACI,aAAc,WAAY,eAAgB,WAAY,KAAM,MAAO,MAAO,gBAAiB,QAAS,OAAQ,QAC5G,QAAS,WAAY,cAAe,UAAW,SAAU,SAAU,KAAM,UAAW,cACpF,OAAQ,OAAQ,YAAa,cAAe,QAAS,MAAO,OAAQ,MAAO,QAAS,KAAM,SAAU,KAAM,QAC1G,OAAQ,QAAS,WAAY,KAAM,OAAQ,OAAQ,MAAO,WAAY,MAAO,OAAQ,cAAe,WACpG,WAAY,WAAY,UAAW,aAAc,SAAU,UAAW,WAAY,WAAY,SAC9F,SAAU,WAAY,SAAU,QAAS,OAAQ,OAAQ,MAAO,SAAU,SAAU,YAAa,QAAS,SAC1G,QAAS,SAAU,MAAO,OAAQ,OAAQ,YAAa,UAAW,MAAO,OAAQ,QAAS,QAAS,UAAW,QAAS,QAE3HC,QAAS,oCAETC,cAAe,oPACfC,YAAa,qFACbC,UAAW,qDAEXC,QAAS,wEACTC,WACIC,OACMC,QAAS,gBACTA,QAAS,aACTA,QAAS,eACTA,QAAS,aACTA,QAAS,aACTA,QAAS,mBACTA,QAAS,YAEfC,aACK,MAAO,UACP,MAAO,eAAgB,qBAE5BC,kBACK,QAAS,WACT,MAAO,WACP,MAAO,eAAgB,YACvB,IAAK,WAEVC,SACK,aAAc,cACd,mBAAoB,cACpB,MAAO,cACP,aAAc,aACd,WAAY,aAEjBC,UACK,YAAa,gBACb,SAAU,cAAe,oBACzB,UAAW,YACX,OAAQ,UAAW,iBAExBC,iBACK,OAAQ,UAAW,iBACnB,OAAQ,cAAe,SACvB,gBAAiB,sBACjB,IAAK,gBAEVC,cACK,OAAQ,UAAW,iBACnB,OAAQ,UAAW,SACnB,IAAK,YAEVC,YACK,iBACOC,OACI,cAAe,kBACf,WAAY,OAI5BC,UACK,KAAOC,MAAO,eAAgBC,KAAM,gBACpC,gBAAiB,kBACjB,iBAAkB,iBAClB,0CAA2C,eAC3C,uCAAwC,iBACxC,UAAW,WAEhBC,YACK,QAAUF,MAAO,WAAYC,KAAM,6BACnC,WAAY,WACZ,MAAO,0BACP,KAAOD,MAAO,eAAgBC,KAAM,UACpC,IAAK,WAEVE,yBACK,MAAQH,MAAO,WAAYC,KAAM,6BACjC,MAAQD,MAAO,WAAYC,KAAM,UAChCX,QAAS,aACTA,QAAS,aACTA,QAAS,YAEfc,UACK,KAAOJ,MAAO,WAAYC,KAAM,qBAChC,eACOH,OACI,YAAa,UAAW,qBAAuB,kBAC/C,WAAY,iBAI5BO,iBACK,KAAOL,MAAO,WAAYC,KAAM,UAChC,IAAK,eAMVK,gBACK,sBACOR,OACI,IAAO,YAAa,mBACpB,WAAY","file":"static/js/12.7940da32.chunk.js","sourcesContent":["webpackJsonp([12],{\n\n/***/ 1369:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\nObject.defineProperty(__webpack_exports__, \"__esModule\", { value: true });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"conf\", function() { return conf; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"language\", function() { return language; });\n/*!---------------------------------------------------------------------------------------------\r\n *  Copyright (C) David Owens II, owensd.io. All rights reserved.\r\n *--------------------------------------------------------------------------------------------*/var conf={comments:{lineComment:'//',blockComment:['/*','*/']},brackets:[['{','}'],['[',']'],['(',')']],autoClosingPairs:[{open:'{',close:'}'},{open:'[',close:']'},{open:'(',close:')'},{open:'\"',close:'\"'},{open:'\\'',close:'\\''},{open:'`',close:'`'}],surroundingPairs:[{open:'{',close:'}'},{open:'[',close:']'},{open:'(',close:')'},{open:'\"',close:'\"'},{open:'\\'',close:'\\''},{open:'`',close:'`'}]};var language={defaultToken:'',tokenPostfix:'.swift',// TODO(owensd): Support the full range of unicode valid identifiers.\nidentifier:/[a-zA-Z_][\\w$]*/,// TODO(owensd): Support the @availability macro properly.\nattributes:['@autoclosure','@noescape','@noreturn','@NSApplicationMain','@NSCopying','@NSManaged','@objc','@UIApplicationMain','@noreturn','@availability','@IBAction','@IBDesignable','@IBInspectable','@IBOutlet'],accessmodifiers:['public','private','internal'],keywords:['__COLUMN__','__FILE__','__FUNCTION__','__LINE__','as','as!','as?','associativity','break','case','catch','class','continue','convenience','default','deinit','didSet','do','dynamic','dynamicType','else','enum','extension','fallthrough','final','for','func','get','guard','if','import','in','infix','init','inout','internal','is','lazy','left','let','mutating','nil','none','nonmutating','operator','optional','override','postfix','precedence','prefix','private','protocol','Protocol','public','repeat','required','return','right','self','Self','set','static','struct','subscript','super','switch','throw','throws','try','try!','Type','typealias','unowned','var','weak','where','while','willSet','FALSE','TRUE'],symbols:/[=(){}\\[\\].,:;@#\\_&\\-<>`?!+*\\\\\\/]/,// Moved . to operatorstart so it can be a delimiter\noperatorstart:/[\\/=\\-+!*%<>&|^~?\\u00A1-\\u00A7\\u00A9\\u00AB\\u00AC\\u00AE\\u00B0-\\u00B1\\u00B6\\u00BB\\u00BF\\u00D7\\u00F7\\u2016-\\u2017\\u2020-\\u2027\\u2030-\\u203E\\u2041-\\u2053\\u2055-\\u205E\\u2190-\\u23FF\\u2500-\\u2775\\u2794-\\u2BFF\\u2E00-\\u2E7F\\u3001-\\u3003\\u3008-\\u3030]/,operatorend:/[\\u0300-\\u036F\\u1DC0-\\u1DFF\\u20D0-\\u20FF\\uFE00-\\uFE0F\\uFE20-\\uFE2F\\uE0100-\\uE01EF]/,operators:/(@operatorstart)((@operatorstart)|(@operatorend))*/,// TODO(owensd): These are borrowed from C#; need to validate correctness for Swift.\nescapes:/\\\\(?:[abfnrtv\\\\\"']|x[0-9A-Fa-f]{1,4}|u[0-9A-Fa-f]{4}|U[0-9A-Fa-f]{8})/,tokenizer:{root:[{include:'@whitespace'},{include:'@comment'},{include:'@attribute'},{include:'@literal'},{include:'@keyword'},{include:'@invokedmethod'},{include:'@symbol'}],whitespace:[[/\\s+/,'white'],[/\"\"\"/,'string.quote','@endDblDocString']],endDblDocString:[[/[^\"]+/,'string'],[/\\\\\"/,'string'],[/\"\"\"/,'string.quote','@popall'],[/\"/,'string']],symbol:[[/[{}()\\[\\]]/,'@brackets'],[/[<>](?!@symbols)/,'@brackets'],[/[.]/,'delimiter'],[/@operators/,'operator'],[/@symbols/,'operator']],comment:[[/\\/\\/\\/.*$/,'comment.doc'],[/\\/\\*\\*/,'comment.doc','@commentdocbody'],[/\\/\\/.*$/,'comment'],[/\\/\\*/,'comment','@commentbody']],commentdocbody:[[/\\/\\*/,'comment','@commentbody'],[/\\*\\//,'comment.doc','@pop'],[/\\:[a-zA-Z]+\\:/,'comment.doc.param'],[/./,'comment.doc']],commentbody:[[/\\/\\*/,'comment','@commentbody'],[/\\*\\//,'comment','@pop'],[/./,'comment']],attribute:[[/\\@@identifier/,{cases:{'@attributes':'keyword.control','@default':''}}]],literal:[[/\"/,{token:'string.quote',next:'@stringlit'}],[/0[b]([01]_?)+/,'number.binary'],[/0[o]([0-7]_?)+/,'number.octal'],[/0[x]([0-9a-fA-F]_?)+([pP][\\-+](\\d_?)+)?/,'number.hex'],[/(\\d_?)*\\.(\\d_?)+([eE][\\-+]?(\\d_?)+)?/,'number.float'],[/(\\d_?)+/,'number']],stringlit:[[/\\\\\\(/,{token:'operator',next:'@interpolatedexpression'}],[/@escapes/,'string'],[/\\\\./,'string.escape.invalid'],[/\"/,{token:'string.quote',next:'@pop'}],[/./,'string']],interpolatedexpression:[[/\\(/,{token:'operator',next:'@interpolatedexpression'}],[/\\)/,{token:'operator',next:'@pop'}],{include:'@literal'},{include:'@keyword'},{include:'@symbol'}],keyword:[[/`/,{token:'operator',next:'@escapedkeyword'}],[/@identifier/,{cases:{'@keywords':'keyword','[A-Z][\\a-zA-Z0-9$]*':'type.identifier','@default':'identifier'}}]],escapedkeyword:[[/`/,{token:'operator',next:'@pop'}],[/./,'identifier']],//\t\tsymbol: [\n//\t\t\t[ /@symbols/, 'operator' ],\n//\t\t\t[ /@operators/, 'operator' ]\n//\t\t],\ninvokedmethod:[[/([.])(@identifier)/,{cases:{'$2':['delimeter','type.identifier'],'@default':''}}]]}};\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// static/js/12.7940da32.chunk.js","/*!---------------------------------------------------------------------------------------------\r\n *  Copyright (C) David Owens II, owensd.io. All rights reserved.\r\n *--------------------------------------------------------------------------------------------*/\r\n'use strict';\r\nexport var conf = {\r\n    comments: {\r\n        lineComment: '//',\r\n        blockComment: ['/*', '*/'],\r\n    },\r\n    brackets: [\r\n        ['{', '}'],\r\n        ['[', ']'],\r\n        ['(', ')']\r\n    ],\r\n    autoClosingPairs: [\r\n        { open: '{', close: '}' },\r\n        { open: '[', close: ']' },\r\n        { open: '(', close: ')' },\r\n        { open: '\"', close: '\"' },\r\n        { open: '\\'', close: '\\'' },\r\n        { open: '`', close: '`' },\r\n    ],\r\n    surroundingPairs: [\r\n        { open: '{', close: '}' },\r\n        { open: '[', close: ']' },\r\n        { open: '(', close: ')' },\r\n        { open: '\"', close: '\"' },\r\n        { open: '\\'', close: '\\'' },\r\n        { open: '`', close: '`' },\r\n    ]\r\n};\r\nexport var language = {\r\n    defaultToken: '',\r\n    tokenPostfix: '.swift',\r\n    // TODO(owensd): Support the full range of unicode valid identifiers.\r\n    identifier: /[a-zA-Z_][\\w$]*/,\r\n    // TODO(owensd): Support the @availability macro properly.\r\n    attributes: [\r\n        '@autoclosure', '@noescape', '@noreturn', '@NSApplicationMain', '@NSCopying', '@NSManaged',\r\n        '@objc', '@UIApplicationMain', '@noreturn', '@availability', '@IBAction', '@IBDesignable', '@IBInspectable', '@IBOutlet'\r\n    ],\r\n    accessmodifiers: ['public', 'private', 'internal'],\r\n    keywords: [\r\n        '__COLUMN__', '__FILE__', '__FUNCTION__', '__LINE__', 'as', 'as!', 'as?', 'associativity', 'break', 'case', 'catch',\r\n        'class', 'continue', 'convenience', 'default', 'deinit', 'didSet', 'do', 'dynamic', 'dynamicType',\r\n        'else', 'enum', 'extension', 'fallthrough', 'final', 'for', 'func', 'get', 'guard', 'if', 'import', 'in', 'infix',\r\n        'init', 'inout', 'internal', 'is', 'lazy', 'left', 'let', 'mutating', 'nil', 'none', 'nonmutating', 'operator',\r\n        'optional', 'override', 'postfix', 'precedence', 'prefix', 'private', 'protocol', 'Protocol', 'public',\r\n        'repeat', 'required', 'return', 'right', 'self', 'Self', 'set', 'static', 'struct', 'subscript', 'super', 'switch',\r\n        'throw', 'throws', 'try', 'try!', 'Type', 'typealias', 'unowned', 'var', 'weak', 'where', 'while', 'willSet', 'FALSE', 'TRUE'\r\n    ],\r\n    symbols: /[=(){}\\[\\].,:;@#\\_&\\-<>`?!+*\\\\\\/]/,\r\n    // Moved . to operatorstart so it can be a delimiter\r\n    operatorstart: /[\\/=\\-+!*%<>&|^~?\\u00A1-\\u00A7\\u00A9\\u00AB\\u00AC\\u00AE\\u00B0-\\u00B1\\u00B6\\u00BB\\u00BF\\u00D7\\u00F7\\u2016-\\u2017\\u2020-\\u2027\\u2030-\\u203E\\u2041-\\u2053\\u2055-\\u205E\\u2190-\\u23FF\\u2500-\\u2775\\u2794-\\u2BFF\\u2E00-\\u2E7F\\u3001-\\u3003\\u3008-\\u3030]/,\r\n    operatorend: /[\\u0300-\\u036F\\u1DC0-\\u1DFF\\u20D0-\\u20FF\\uFE00-\\uFE0F\\uFE20-\\uFE2F\\uE0100-\\uE01EF]/,\r\n    operators: /(@operatorstart)((@operatorstart)|(@operatorend))*/,\r\n    // TODO(owensd): These are borrowed from C#; need to validate correctness for Swift.\r\n    escapes: /\\\\(?:[abfnrtv\\\\\"']|x[0-9A-Fa-f]{1,4}|u[0-9A-Fa-f]{4}|U[0-9A-Fa-f]{8})/,\r\n    tokenizer: {\r\n        root: [\r\n            { include: '@whitespace' },\r\n            { include: '@comment' },\r\n            { include: '@attribute' },\r\n            { include: '@literal' },\r\n            { include: '@keyword' },\r\n            { include: '@invokedmethod' },\r\n            { include: '@symbol' },\r\n        ],\r\n        whitespace: [\r\n            [/\\s+/, 'white'],\r\n            [/\"\"\"/, 'string.quote', '@endDblDocString']\r\n        ],\r\n        endDblDocString: [\r\n            [/[^\"]+/, 'string'],\r\n            [/\\\\\"/, 'string'],\r\n            [/\"\"\"/, 'string.quote', '@popall'],\r\n            [/\"/, 'string']\r\n        ],\r\n        symbol: [\r\n            [/[{}()\\[\\]]/, '@brackets'],\r\n            [/[<>](?!@symbols)/, '@brackets'],\r\n            [/[.]/, 'delimiter'],\r\n            [/@operators/, 'operator'],\r\n            [/@symbols/, 'operator']\r\n        ],\r\n        comment: [\r\n            [/\\/\\/\\/.*$/, 'comment.doc'],\r\n            [/\\/\\*\\*/, 'comment.doc', '@commentdocbody'],\r\n            [/\\/\\/.*$/, 'comment'],\r\n            [/\\/\\*/, 'comment', '@commentbody']\r\n        ],\r\n        commentdocbody: [\r\n            [/\\/\\*/, 'comment', '@commentbody'],\r\n            [/\\*\\//, 'comment.doc', '@pop'],\r\n            [/\\:[a-zA-Z]+\\:/, 'comment.doc.param'],\r\n            [/./, 'comment.doc']\r\n        ],\r\n        commentbody: [\r\n            [/\\/\\*/, 'comment', '@commentbody'],\r\n            [/\\*\\//, 'comment', '@pop'],\r\n            [/./, 'comment']\r\n        ],\r\n        attribute: [\r\n            [/\\@@identifier/, {\r\n                    cases: {\r\n                        '@attributes': 'keyword.control',\r\n                        '@default': ''\r\n                    }\r\n                }]\r\n        ],\r\n        literal: [\r\n            [/\"/, { token: 'string.quote', next: '@stringlit' }],\r\n            [/0[b]([01]_?)+/, 'number.binary'],\r\n            [/0[o]([0-7]_?)+/, 'number.octal'],\r\n            [/0[x]([0-9a-fA-F]_?)+([pP][\\-+](\\d_?)+)?/, 'number.hex'],\r\n            [/(\\d_?)*\\.(\\d_?)+([eE][\\-+]?(\\d_?)+)?/, 'number.float'],\r\n            [/(\\d_?)+/, 'number']\r\n        ],\r\n        stringlit: [\r\n            [/\\\\\\(/, { token: 'operator', next: '@interpolatedexpression' }],\r\n            [/@escapes/, 'string'],\r\n            [/\\\\./, 'string.escape.invalid'],\r\n            [/\"/, { token: 'string.quote', next: '@pop' }],\r\n            [/./, 'string']\r\n        ],\r\n        interpolatedexpression: [\r\n            [/\\(/, { token: 'operator', next: '@interpolatedexpression' }],\r\n            [/\\)/, { token: 'operator', next: '@pop' }],\r\n            { include: '@literal' },\r\n            { include: '@keyword' },\r\n            { include: '@symbol' }\r\n        ],\r\n        keyword: [\r\n            [/`/, { token: 'operator', next: '@escapedkeyword' }],\r\n            [/@identifier/, {\r\n                    cases: {\r\n                        '@keywords': 'keyword', '[A-Z][\\a-zA-Z0-9$]*': 'type.identifier',\r\n                        '@default': 'identifier'\r\n                    }\r\n                }]\r\n        ],\r\n        escapedkeyword: [\r\n            [/`/, { token: 'operator', next: '@pop' }],\r\n            [/./, 'identifier']\r\n        ],\r\n        //\t\tsymbol: [\r\n        //\t\t\t[ /@symbols/, 'operator' ],\r\n        //\t\t\t[ /@operators/, 'operator' ]\r\n        //\t\t],\r\n        invokedmethod: [\r\n            [/([.])(@identifier)/, {\r\n                    cases: {\r\n                        '$2': ['delimeter', 'type.identifier'],\r\n                        '@default': ''\r\n                    }\r\n                }],\r\n        ]\r\n    }\r\n};\r\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/monaco-editor/esm/vs/basic-languages/swift/swift.js"],"sourceRoot":""}