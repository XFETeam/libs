{"version":3,"sources":["../static/js/14.4b5b45ab.chunk.js","../node_modules/monaco-editor/esm/vs/basic-languages/shell/shell.js"],"names":["webpackJsonp","1361","module","__webpack_exports__","__webpack_require__","conf","comments","lineComment","brackets","autoClosingPairs","open","close","surroundingPairs","language","defaultToken","ignoreCase","tokenPostfix","token","keywords","builtins","symbols","tokenizer","root","include","cases","whitespace","numbers","strings","stringBody","dblStringBody","heredoc","parameters","parameterBodyQuote","parameterBodyDoubleQuote","parameterBodyParen","parameterBodyCurlyBrace"],"mappings":"AAAAA,cAAc,KAERC,KACA,SAAUC,EAAQC,EAAqBC,GAE7C,YCLA,2HAKO,IAAIC,IACPC,UACIC,YAAa,KAEjBC,WAAY,IAAK,MAAO,IAAK,MAAO,IAAK,MACzCC,mBACMC,KAAM,IAAKC,MAAO,MAClBD,KAAM,IAAKC,MAAO,MAClBD,KAAM,IAAKC,MAAO,MAClBD,KAAM,IAAKC,MAAO,MAClBD,KAAM,IAAKC,MAAO,MAClBD,KAAM,IAAKC,MAAO,MAExBC,mBACMF,KAAM,IAAKC,MAAO,MAClBD,KAAM,IAAKC,MAAO,MAClBD,KAAM,IAAKC,MAAO,MAClBD,KAAM,IAAKC,MAAO,MAClBD,KAAM,IAAKC,MAAO,MAClBD,KAAM,IAAKC,MAAO,OAGjBE,GACPC,aAAc,GACdC,YAAY,EACZC,aAAc,SACdR,WACMS,MAAO,oBAAqBP,KAAM,IAAKC,MAAO,MAC9CM,MAAO,wBAAyBP,KAAM,IAAKC,MAAO,MAClDM,MAAO,mBAAoBP,KAAM,IAAKC,MAAO,MAEnDO,UACI,KACA,OACA,KACA,OACA,OACA,QACA,QACA,MACA,KACA,OACA,KACA,MACA,MACA,OACA,OACA,MACA,QACA,SACA,YAEJC,UACI,KACA,MACA,OACA,OACA,MACA,KACA,KACA,QACA,QACA,SACA,QACA,KACA,OACA,MACA,OACA,OACA,OACA,OACA,MACA,MACA,MACA,OACA,KACA,OACA,UACA,KACA,KACA,OACA,QACA,UACA,KACA,KACA,OACA,MACA,OACA,KACA,UACA,KACA,QACA,MACA,UACA,KACA,QACA,QACA,SACA,OACA,QACA,MACA,QACA,OACA,KACA,OACA,MACA,MACA,SACA,MACA,QACA,KACA,MACA,OACA,KACA,OACA,MACA,QACA,MACA,OAGJC,QAAS,0BAETC,WACIC,OACMC,QAAS,gBAEP,eAEIC,OACI,YAAa,UACb,YAAa,kBACb,WAAY,OAItBD,QAAS,aACTA,QAAS,gBACTA,QAAS,aACV,aAAc,cACd,QAAS,mBACT,WAAY,cACXA,QAAS,aACV,OAAQ,cAEbE,aACK,MAAO,UACP,WAAY,YACZ,UAAW,YAEhBC,UACK,2BAA4B,iBAC5B,gCAAiC,eACjC,MAAO,WAGZC,UACK,IAAK,SAAU,gBACf,IAAK,SAAU,mBAEpBC,aACK,IAAK,SAAU,YACf,IAAK,WAEVC,gBACK,IAAK,SAAU,YACf,IAAK,WAEVC,UACK,2CAA4C,YAAa,QAAS,2BAA4B,iBAAkB,8BAErHC,aACK,QAAS,wBACT,QAAS,aACT,iBAAkB,aAClB,MAAO,WAAY,wBACnB,MAAO,WAAY,8BACnB,OAAQ,WAAY,wBACpB,OAAQ,WAAY,6BAEzBC,qBACK,iBAAkB,aAClB,cAAe,cACf,MAAO,WAAY,SAExBC,2BACK,iBAAkB,aAClB,cAAe,cACf,MAAO,WAAY,SAExBC,qBACK,iBAAkB,aAClB,cAAe,cACf,MAAO,WAAY,SAExBC,0BACK,iBAAkB,aAClB,cAAe,cACf,MAAO,WAAY","file":"static/js/14.4b5b45ab.chunk.js","sourcesContent":["webpackJsonp([14],{\n\n/***/ 1361:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\nObject.defineProperty(__webpack_exports__, \"__esModule\", { value: true });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"conf\", function() { return conf; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"language\", function() { return language; });\n/*---------------------------------------------------------------------------------------------\r\n*  Copyright (c) Microsoft Corporation. All rights reserved.\r\n*  Licensed under the MIT License. See License.txt in the project root for license information.\r\n*--------------------------------------------------------------------------------------------*/var conf={comments:{lineComment:'#'},brackets:[['{','}'],['[',']'],['(',')']],autoClosingPairs:[{open:'{',close:'}'},{open:'[',close:']'},{open:'(',close:')'},{open:'\"',close:'\"'},{open:\"'\",close:\"'\"},{open:'`',close:'`'}],surroundingPairs:[{open:'{',close:'}'},{open:'[',close:']'},{open:'(',close:')'},{open:'\"',close:'\"'},{open:\"'\",close:\"'\"},{open:'`',close:'`'}]};var language={defaultToken:'',ignoreCase:true,tokenPostfix:'.shell',brackets:[{token:'delimiter.bracket',open:'{',close:'}'},{token:'delimiter.parenthesis',open:'(',close:')'},{token:'delimiter.square',open:'[',close:']'}],keywords:['if','then','do','else','elif','while','until','for','in','esac','fi','fin','fil','done','exit','set','unset','export','function'],builtins:['ab','awk','bash','beep','cat','cc','cd','chown','chmod','chroot','clear','cp','curl','cut','diff','echo','find','gawk','gcc','get','git','grep','hg','kill','killall','ln','ls','make','mkdir','openssl','mv','nc','node','npm','ping','ps','restart','rm','rmdir','sed','service','sh','shopt','shred','source','sort','sleep','ssh','start','stop','su','sudo','svn','tee','telnet','top','touch','vi','vim','wall','wc','wget','who','write','yes','zsh'],// we include these common regular expressions\nsymbols:/[=><!~?&|+\\-*\\/\\^;\\.,]+/,// The main tokenizer for our languages\ntokenizer:{root:[{include:'@whitespace'},[/[a-zA-Z]\\w*/,{cases:{'@keywords':'keyword','@builtins':'type.identifier','@default':''}}],{include:'@strings'},{include:'@parameters'},{include:'@heredoc'},[/[{}\\[\\]()]/,'@brackets'],[/-+\\w+/,'attribute.name'],[/@symbols/,'delimiter'],{include:'@numbers'},[/[,;]/,'delimiter']],whitespace:[[/\\s+/,'white'],[/(^#!.*$)/,'metatag'],[/(^#.*$)/,'comment']],numbers:[[/\\d*\\.\\d+([eE][\\-+]?\\d+)?/,'number.float'],[/0[xX][0-9a-fA-F_]*[0-9a-fA-F]/,'number.hex'],[/\\d+/,'number']],// Recognize strings, including those broken across lines\nstrings:[[/'/,'string','@stringBody'],[/\"/,'string','@dblStringBody']],stringBody:[[/'/,'string','@popall'],[/./,'string']],dblStringBody:[[/\"/,'string','@popall'],[/./,'string']],heredoc:[[/(<<[-<]?)(\\s*)(['\"`]?)([\\w\\-]+)(['\"`]?)/,['constants','white','string.heredoc.delimiter','string.heredoc','string.heredoc.delimiter']]],parameters:[[/\\$\\d+/,'variable.predefined'],[/\\$\\w+/,'variable'],[/\\$[*@#?\\-$!0_]/,'variable'],[/\\$'/,'variable','@parameterBodyQuote'],[/\\$\"/,'variable','@parameterBodyDoubleQuote'],[/\\$\\(/,'variable','@parameterBodyParen'],[/\\$\\{/,'variable','@parameterBodyCurlyBrace']],parameterBodyQuote:[[/[^#:%*@\\-!_']+/,'variable'],[/[#:%*@\\-!_]/,'delimiter'],[/[']/,'variable','@pop']],parameterBodyDoubleQuote:[[/[^#:%*@\\-!_\"]+/,'variable'],[/[#:%*@\\-!_]/,'delimiter'],[/[\"]/,'variable','@pop']],parameterBodyParen:[[/[^#:%*@\\-!_)]+/,'variable'],[/[#:%*@\\-!_]/,'delimiter'],[/[)]/,'variable','@pop']],parameterBodyCurlyBrace:[[/[^#:%*@\\-!_}]+/,'variable'],[/[#:%*@\\-!_]/,'delimiter'],[/[}]/,'variable','@pop']]}};\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// static/js/14.4b5b45ab.chunk.js","/*---------------------------------------------------------------------------------------------\r\n*  Copyright (c) Microsoft Corporation. All rights reserved.\r\n*  Licensed under the MIT License. See License.txt in the project root for license information.\r\n*--------------------------------------------------------------------------------------------*/\r\n'use strict';\r\nexport var conf = {\r\n    comments: {\r\n        lineComment: '#',\r\n    },\r\n    brackets: [['{', '}'], ['[', ']'], ['(', ')']],\r\n    autoClosingPairs: [\r\n        { open: '{', close: '}' },\r\n        { open: '[', close: ']' },\r\n        { open: '(', close: ')' },\r\n        { open: '\"', close: '\"' },\r\n        { open: \"'\", close: \"'\" },\r\n        { open: '`', close: '`' },\r\n    ],\r\n    surroundingPairs: [\r\n        { open: '{', close: '}' },\r\n        { open: '[', close: ']' },\r\n        { open: '(', close: ')' },\r\n        { open: '\"', close: '\"' },\r\n        { open: \"'\", close: \"'\" },\r\n        { open: '`', close: '`' },\r\n    ],\r\n};\r\nexport var language = {\r\n    defaultToken: '',\r\n    ignoreCase: true,\r\n    tokenPostfix: '.shell',\r\n    brackets: [\r\n        { token: 'delimiter.bracket', open: '{', close: '}' },\r\n        { token: 'delimiter.parenthesis', open: '(', close: ')' },\r\n        { token: 'delimiter.square', open: '[', close: ']' },\r\n    ],\r\n    keywords: [\r\n        'if',\r\n        'then',\r\n        'do',\r\n        'else',\r\n        'elif',\r\n        'while',\r\n        'until',\r\n        'for',\r\n        'in',\r\n        'esac',\r\n        'fi',\r\n        'fin',\r\n        'fil',\r\n        'done',\r\n        'exit',\r\n        'set',\r\n        'unset',\r\n        'export',\r\n        'function',\r\n    ],\r\n    builtins: [\r\n        'ab',\r\n        'awk',\r\n        'bash',\r\n        'beep',\r\n        'cat',\r\n        'cc',\r\n        'cd',\r\n        'chown',\r\n        'chmod',\r\n        'chroot',\r\n        'clear',\r\n        'cp',\r\n        'curl',\r\n        'cut',\r\n        'diff',\r\n        'echo',\r\n        'find',\r\n        'gawk',\r\n        'gcc',\r\n        'get',\r\n        'git',\r\n        'grep',\r\n        'hg',\r\n        'kill',\r\n        'killall',\r\n        'ln',\r\n        'ls',\r\n        'make',\r\n        'mkdir',\r\n        'openssl',\r\n        'mv',\r\n        'nc',\r\n        'node',\r\n        'npm',\r\n        'ping',\r\n        'ps',\r\n        'restart',\r\n        'rm',\r\n        'rmdir',\r\n        'sed',\r\n        'service',\r\n        'sh',\r\n        'shopt',\r\n        'shred',\r\n        'source',\r\n        'sort',\r\n        'sleep',\r\n        'ssh',\r\n        'start',\r\n        'stop',\r\n        'su',\r\n        'sudo',\r\n        'svn',\r\n        'tee',\r\n        'telnet',\r\n        'top',\r\n        'touch',\r\n        'vi',\r\n        'vim',\r\n        'wall',\r\n        'wc',\r\n        'wget',\r\n        'who',\r\n        'write',\r\n        'yes',\r\n        'zsh',\r\n    ],\r\n    // we include these common regular expressions\r\n    symbols: /[=><!~?&|+\\-*\\/\\^;\\.,]+/,\r\n    // The main tokenizer for our languages\r\n    tokenizer: {\r\n        root: [\r\n            { include: '@whitespace' },\r\n            [\r\n                /[a-zA-Z]\\w*/,\r\n                {\r\n                    cases: {\r\n                        '@keywords': 'keyword',\r\n                        '@builtins': 'type.identifier',\r\n                        '@default': ''\r\n                    },\r\n                },\r\n            ],\r\n            { include: '@strings' },\r\n            { include: '@parameters' },\r\n            { include: '@heredoc' },\r\n            [/[{}\\[\\]()]/, '@brackets'],\r\n            [/-+\\w+/, 'attribute.name'],\r\n            [/@symbols/, 'delimiter'],\r\n            { include: '@numbers' },\r\n            [/[,;]/, 'delimiter'],\r\n        ],\r\n        whitespace: [\r\n            [/\\s+/, 'white'],\r\n            [/(^#!.*$)/, 'metatag'],\r\n            [/(^#.*$)/, 'comment'],\r\n        ],\r\n        numbers: [\r\n            [/\\d*\\.\\d+([eE][\\-+]?\\d+)?/, 'number.float'],\r\n            [/0[xX][0-9a-fA-F_]*[0-9a-fA-F]/, 'number.hex'],\r\n            [/\\d+/, 'number'],\r\n        ],\r\n        // Recognize strings, including those broken across lines\r\n        strings: [\r\n            [/'/, 'string', '@stringBody'],\r\n            [/\"/, 'string', '@dblStringBody']\r\n        ],\r\n        stringBody: [\r\n            [/'/, 'string', '@popall'],\r\n            [/./, 'string'],\r\n        ],\r\n        dblStringBody: [\r\n            [/\"/, 'string', '@popall'],\r\n            [/./, 'string'],\r\n        ],\r\n        heredoc: [\r\n            [/(<<[-<]?)(\\s*)(['\"`]?)([\\w\\-]+)(['\"`]?)/, ['constants', 'white', 'string.heredoc.delimiter', 'string.heredoc', 'string.heredoc.delimiter']]\r\n        ],\r\n        parameters: [\r\n            [/\\$\\d+/, 'variable.predefined'],\r\n            [/\\$\\w+/, 'variable'],\r\n            [/\\$[*@#?\\-$!0_]/, 'variable'],\r\n            [/\\$'/, 'variable', '@parameterBodyQuote'],\r\n            [/\\$\"/, 'variable', '@parameterBodyDoubleQuote'],\r\n            [/\\$\\(/, 'variable', '@parameterBodyParen'],\r\n            [/\\$\\{/, 'variable', '@parameterBodyCurlyBrace'],\r\n        ],\r\n        parameterBodyQuote: [\r\n            [/[^#:%*@\\-!_']+/, 'variable'],\r\n            [/[#:%*@\\-!_]/, 'delimiter'],\r\n            [/[']/, 'variable', '@pop'],\r\n        ],\r\n        parameterBodyDoubleQuote: [\r\n            [/[^#:%*@\\-!_\"]+/, 'variable'],\r\n            [/[#:%*@\\-!_]/, 'delimiter'],\r\n            [/[\"]/, 'variable', '@pop'],\r\n        ],\r\n        parameterBodyParen: [\r\n            [/[^#:%*@\\-!_)]+/, 'variable'],\r\n            [/[#:%*@\\-!_]/, 'delimiter'],\r\n            [/[)]/, 'variable', '@pop'],\r\n        ],\r\n        parameterBodyCurlyBrace: [\r\n            [/[^#:%*@\\-!_}]+/, 'variable'],\r\n            [/[#:%*@\\-!_]/, 'delimiter'],\r\n            [/[}]/, 'variable', '@pop'],\r\n        ],\r\n    }\r\n};\r\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/monaco-editor/esm/vs/basic-languages/shell/shell.js"],"sourceRoot":""}